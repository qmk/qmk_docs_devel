import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.Cauyuiy8.js";
const __pageData = JSON.parse('{"title":"How to Use GitHub with QMK","description":"","frontmatter":{},"headers":[],"relativePath":"getting_started_github.md","filePath":"getting_started_github.md","lastUpdated":1751656200000}');
const _sfc_main = { name: "getting_started_github.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="how-to-use-github-with-qmk" tabindex="-1">How to Use GitHub with QMK <a class="header-anchor" href="#how-to-use-github-with-qmk" aria-label="Permalink to &quot;How to Use GitHub with QMK&quot;">â€‹</a></h1><p>GitHub can be a little tricky to those that aren&#39;t familiar with it - this guide will walk through each step of forking, cloning, and submitting a pull request with QMK.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This guide assumes you&#39;re somewhat comfortable with running things at the command line, and have git installed on your system.</p></div><p>Start on the <a href="https://github.com/qmk/qmk_firmware" target="_blank" rel="noreferrer">QMK GitHub page</a>, and you&#39;ll see a button in the upper right that says &quot;Fork&quot;:</p><p><img src="https://i.imgur.com/8Toomz4.jpg" alt="Fork on GitHub"></p><p>If you&#39;re a part of an organization, you&#39;ll need to choose which account to fork it to. In most circumstances, you&#39;ll want to fork it to your personal account. Once your fork is completed (sometimes this takes a little while), click the &quot;Clone or Download&quot; button:</p><p><img src="https://i.imgur.com/N1NYcSz.jpg" alt="Download from GitHub"></p><p>And be sure to select &quot;HTTPS&quot;, and select the link and copy it:</p><p><img src="https://i.imgur.com/eGO0ohO.jpg" alt="HTTPS link"></p><p>From here, enter <code>git clone --recurse-submodules </code> into the command line, and then paste your link:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>user@computer:~$ git clone --recurse-submodules https://github.com/whoeveryouare/qmk_firmware.git</span></span>\n<span class="line"><span>Cloning into &#39;qmk_firmware&#39;...</span></span>\n<span class="line"><span>remote: Enumerating objects: 9, done.</span></span>\n<span class="line"><span>remote: Counting objects: 100% (9/9), done.</span></span>\n<span class="line"><span>remote: Compressing objects: 100% (5/5), done.</span></span>\n<span class="line"><span>remote: Total 183883 (delta 5), reused 4 (delta 4), pack-reused 183874</span></span>\n<span class="line"><span>Receiving objects: 100% (183883/183883), 132.90 MiB | 9.57 MiB/s, done.</span></span>\n<span class="line"><span>Resolving deltas: 100% (119972/119972), done.</span></span>\n<span class="line"><span>...</span></span>\n<span class="line"><span>Submodule path &#39;lib/chibios&#39;: checked out &#39;587968d6cbc2b0e1c7147540872f2a67e59ca18b&#39;</span></span>\n<span class="line"><span>Submodule path &#39;lib/chibios-contrib&#39;: checked out &#39;ede48346eee4b8d6847c19bc01420bee76a5e486&#39;</span></span>\n<span class="line"><span>Submodule path &#39;lib/googletest&#39;: checked out &#39;ec44c6c1675c25b9827aacd08c02433cccde7780&#39;</span></span>\n<span class="line"><span>Submodule path &#39;lib/lufa&#39;: checked out &#39;ce10f7642b0459e409839b23cc91498945119b4d&#39;</span></span></code></pre></div><p>You now have your QMK fork on your local machine, and you can add your keymap, compile it and flash it to your board. Once you&#39;re happy with your changes, you can add, commit, and push them to your fork like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>user@computer:~$ git add .</span></span>\n<span class="line"><span>user@computer:~$ git commit -m &quot;adding my keymap&quot;</span></span>\n<span class="line"><span>[master cccb1608] adding my keymap</span></span>\n<span class="line"><span> 1 file changed, 1 insertion(+)</span></span>\n<span class="line"><span> create mode 100644 keyboards/planck/keymaps/mine/keymap.c</span></span>\n<span class="line"><span>user@computer:~$ git push</span></span>\n<span class="line"><span>Counting objects: 1, done.</span></span>\n<span class="line"><span>Delta compression using up to 4 threads.</span></span>\n<span class="line"><span>Compressing objects: 100% (1/1), done.</span></span>\n<span class="line"><span>Writing objects: 100% (1/1), 1.64 KiB | 0 bytes/s, done.</span></span>\n<span class="line"><span>Total 1 (delta 1), reused 0 (delta 0)</span></span>\n<span class="line"><span>remote: Resolving deltas: 100% (1/1), completed with 1 local objects.</span></span>\n<span class="line"><span>To https://github.com/whoeveryouare/qmk_firmware.git</span></span>\n<span class="line"><span> + 20043e64...7da94ac5 master -&gt; master</span></span></code></pre></div><p>Your changes now exist on your fork on GitHub - if you go back there (<code>https://github.com/&lt;whoeveryouare&gt;/qmk_firmware</code>), you can create a &quot;New Pull Request&quot; by clicking this button:</p><p><img src="https://i.imgur.com/DxMHpJ8.jpg" alt="New Pull Request"></p><p>Here you&#39;ll be able to see exactly what you&#39;ve committed - if it all looks good, you can finalize it by clicking &quot;Create Pull Request&quot;:</p><p><img src="https://i.imgur.com/Ojydlaj.jpg" alt="Create Pull Request"></p><p>After submitting, we may talk to you about your changes, ask that you make changes, and eventually accept it! Thanks for contributing to QMK ðŸ˜ƒ</p>', 18);
const _hoisted_19 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_19);
}
const getting_started_github = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  getting_started_github as default
};
