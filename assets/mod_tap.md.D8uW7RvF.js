import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.Cauyuiy8.js";
const __pageData = JSON.parse('{"title":"Mod-Tap","description":"","frontmatter":{},"headers":[],"relativePath":"mod_tap.md","filePath":"mod_tap.md","lastUpdated":1751656200000}');
const _sfc_main = { name: "mod_tap.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="mod-tap" tabindex="-1">Mod-Tap <a class="header-anchor" href="#mod-tap" aria-label="Permalink to &quot;Mod-Tap&quot;">​</a></h1><p>The Mod-Tap key <code>MT(mod, kc)</code> acts like a modifier when held, and a regular keycode when tapped. In other words, you can have a key that sends Escape when you tap it, but functions as a Control or Shift key when you hold it down.</p><p>The modifiers (<code>mod</code>) argument to the <code>MT()</code> macro are prefixed with <code>MOD_</code>, not <code>KC_</code>:</p><table><thead><tr><th>Modifier</th><th>Description</th></tr></thead><tbody><tr><td><code>MOD_LCTL</code></td><td>Left Control</td></tr><tr><td><code>MOD_LSFT</code></td><td>Left Shift</td></tr><tr><td><code>MOD_LALT</code></td><td>Left Alt</td></tr><tr><td><code>MOD_LGUI</code></td><td>Left GUI (Windows/Command/Super key)</td></tr><tr><td><code>MOD_RCTL</code></td><td>Right Control</td></tr><tr><td><code>MOD_RSFT</code></td><td>Right Shift</td></tr><tr><td><code>MOD_RALT</code></td><td>Right Alt (AltGr)</td></tr><tr><td><code>MOD_RGUI</code></td><td>Right GUI (Windows/Command/Super key)</td></tr><tr><td><code>MOD_HYPR</code></td><td>Hyper (Left Control, Shift, Alt and GUI)</td></tr><tr><td><code>MOD_MEH</code></td><td>Meh (Left Control, Shift, and Alt)</td></tr></tbody></table><p>You can combine these by ORing them together like so:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MOD_LCTL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MOD_LSFT, KC_ESC)</span></span></code></pre></div><p>This key would activate Left Control and Left Shift when held, and send Escape when tapped.</p><p>For convenience, QMK includes some Mod-Tap shortcuts to make common combinations more compact in your keymap:</p><table><thead><tr><th>Key</th><th>Aliases</th><th>Description</th></tr></thead><tbody><tr><td><code>LCTL_T(kc)</code></td><td><code>CTL_T(kc)</code></td><td>Left Control when held, <code>kc</code> when tapped</td></tr><tr><td><code>LSFT_T(kc)</code></td><td><code>SFT_T(kc)</code></td><td>Left Shift when held, <code>kc</code> when tapped</td></tr><tr><td><code>LALT_T(kc)</code></td><td><code>ALT_T(kc)</code>, <code>LOPT_T(kc)</code>, <code>OPT_T(kc)</code></td><td>Left Alt when held, <code>kc</code> when tapped</td></tr><tr><td><code>LGUI_T(kc)</code></td><td><code>GUI_T(kc)</code>, <code>LCMD_T(kc)</code>, <code>LWIN_T(kc)</code>, <code>CMD_T(kc)</code>, <code>WIN_T(kc)</code></td><td>Left GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>LCS_T(kc)</code></td><td></td><td>Left Control and Left Shift when held, <code>kc</code> when tapped</td></tr><tr><td><code>LCA_T(kc)</code></td><td></td><td>Left Control and Left Alt when held, <code>kc</code> when tapped</td></tr><tr><td><code>LCG_T(kc)</code></td><td></td><td>Left Control and Left GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>LSA_T(kc)</code></td><td></td><td>Left Shift and Left Alt when held, <code>kc</code> when tapped</td></tr><tr><td><code>LSG_T(kc)</code></td><td><code>SGUI_T(kc)</code>, <code>SCMD_T(kc)</code>, <code>SWIN_T(kc)</code></td><td>Left Shift and Left GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>LAG_T(kc)</code></td><td></td><td>Left Alt and Left GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>LCSG_T(kc)</code></td><td></td><td>Left Control, Left Shift and Left GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>LCAG_T(kc)</code></td><td></td><td>Left Control, Left Alt and Left GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>LSAG_T(kc)</code></td><td></td><td>Left Shift, Left Alt and Left GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>RCTL_T(kc)</code></td><td></td><td>Right Control when held, <code>kc</code> when tapped</td></tr><tr><td><code>RSFT_T(kc)</code></td><td></td><td>Right Shift when held, <code>kc</code> when tapped</td></tr><tr><td><code>RALT_T(kc)</code></td><td><code>ROPT_T(kc)</code>, <code>ALGR_T(kc)</code></td><td>Right Alt when held, <code>kc</code> when tapped</td></tr><tr><td><code>RGUI_T(kc)</code></td><td><code>RCMD_T(kc)</code>, <code>RWIN_T(kc)</code></td><td>Right GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>RCS_T(kc)</code></td><td></td><td>Right Control and Right Shift when held, <code>kc</code> when tapped</td></tr><tr><td><code>RCA_T(kc)</code></td><td></td><td>Right Control and Right Alt when held, <code>kc</code> when tapped</td></tr><tr><td><code>RCG_T(kc)</code></td><td></td><td>Right Control and Right GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>RSA_T(kc)</code></td><td><code>SAGR_T(kc)</code></td><td>Right Shift and Right Alt when held, <code>kc</code> when tapped</td></tr><tr><td><code>RSG_T(kc)</code></td><td></td><td>Right Shift and Right GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>RAG_T(kc)</code></td><td></td><td>Right Alt and Right GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>RCSG_T(kc)</code></td><td></td><td>Right Control, Right Shift and Right GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>RCAG_T(kc)</code></td><td></td><td>Right Control, Right Alt and Right GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>RSAG_T(kc)</code></td><td></td><td>Right Shift, Right Alt and Right GUI when held, <code>kc</code> when tapped</td></tr><tr><td><code>MEH_T(kc)</code></td><td></td><td>Left Control, Left Shift and Left Alt when held, <code>kc</code> when tapped</td></tr><tr><td><code>HYPR_T(kc)</code></td><td><code>ALL_T(kc)</code></td><td>Left Control, Left Shift, Left Alt and Left GUI when held, <code>kc</code> when tapped<sup>1</sup></td></tr></tbody></table><p><sup>1. More information on the Hyper key can be found on <a href="https://brettterpstra.com/2012/12/08/a-useful-caps-lock-key/" target="_blank" rel="noreferrer">this blog post by Brett Terpstra</a>.</sup></p><h2 id="caveats" tabindex="-1">Caveats <a class="header-anchor" href="#caveats" aria-label="Permalink to &quot;Caveats&quot;">​</a></h2><p>Currently, the <code>kc</code> argument of <code>MT()</code> is limited to the <a href="./keycodes_basic">Basic Keycode set</a>, meaning you can&#39;t use keycodes like <code>LCTL()</code>, <code>KC_TILD</code>, or anything greater than <code>0xFF</code>. This is because QMK uses 16-bit keycodes, of which 3 bits are used for the function identifier, 1 bit for selecting right or left mods, and 4 bits to tell which mods are used, leaving only 8 bits for the keycode. Additionally, if at least one right-handed modifier is specified in a Mod-Tap, it will cause all modifiers specified to become right-handed, so it is not possible to mix and match the two - for example, Left Control and Right Shift would become Right Control and Right Shift.</p><p>Expanding this would be complicated, at best. Moving to a 32-bit keycode would solve a lot of this, but would double the amount of space that the keymap matrix uses. And it could potentially cause issues, too. If you need to apply modifiers to your tapped keycode, <a href="./features/tap_dance#example-5-using-tap-dance-for-advanced-mod-tap-and-layer-tap-keys">Tap Dance</a> can be used to accomplish this.</p><p>You may also run into issues when using Remote Desktop Connection on Windows. Because these keycodes send key events faster than a human, Remote Desktop could miss them. To fix this, open Remote Desktop Connection, click on &quot;Show Options&quot;, open the &quot;Local Resources&quot; tab, and in the keyboard section, change the drop down to &quot;On this Computer&quot;. This will fix the issue, and allow the characters to work correctly. It can also be mitigated by increasing <a href="./config_options#behaviors-that-can-be-configured"><code>TAP_CODE_DELAY</code></a>.</p><h2 id="intercepting-mod-taps" tabindex="-1">Intercepting Mod-Taps <a class="header-anchor" href="#intercepting-mod-taps" aria-label="Permalink to &quot;Intercepting Mod-Taps&quot;">​</a></h2><h3 id="changing-tap-function" tabindex="-1">Changing tap function <a class="header-anchor" href="#changing-tap-function" aria-label="Permalink to &quot;Changing tap function&quot;">​</a></h3><p>The basic keycode limitation with Mod-Tap can be worked around by intercepting it in <code>process_record_user</code>. For example, shifted keycode <code>KC_DQUO</code> cannot be used with <code>MT()</code> because it is a 16-bit keycode alias of <code>LSFT(KC_QUOT)</code>. Modifiers on <code>KC_DQUO</code> will be masked by <code>MT()</code>. But the following custom code can be used to intercept the &quot;tap&quot; function to manually send <code>KC_DQUO</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_record_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LCTL_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_DQUO):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tap.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                tap_code16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_DQUO);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Send KC_DQUO on tap</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Return false to ignore further processing of key</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="changing-hold-function" tabindex="-1">Changing hold function <a class="header-anchor" href="#changing-hold-function" aria-label="Permalink to &quot;Changing hold function&quot;">​</a></h3><p>Likewise, similar custom code can also be used to intercept the hold function to send custom user key code. The following example uses <code>LT(0, kc)</code> (layer-tap key with no practical use because layer 0 is always active) to add cut, copy and paste function to X,C and V keys when they are held down:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_record_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,KC_X):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tap.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                tap_code16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_X));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Intercept hold function to send Ctrl-X</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // Return true for normal processing of tap keycode</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,KC_C):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tap.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                tap_code16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_C));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Intercept hold function to send Ctrl-C</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // Return true for normal processing of tap keycode</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,KC_V):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tap.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                tap_code16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_V));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Intercept hold function to send Ctrl-V</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // Return true for normal processing of tap keycode</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="changing-both-tap-and-hold" tabindex="-1">Changing both tap and hold <a class="header-anchor" href="#changing-both-tap-and-hold" aria-label="Permalink to &quot;Changing both tap and hold&quot;">​</a></h3><p>This last example implements custom tap and hold function with <code>LT(0,KC_NO)</code> to create a single copy-on-tap, paste-on-hold key:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_record_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,KC_NO):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tap.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                tap_code16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_C));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Intercept tap function to send Ctrl-C</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                tap_code16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_V));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Intercept hold function to send Ctrl-V</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="other-resources" tabindex="-1">Other Resources <a class="header-anchor" href="#other-resources" aria-label="Permalink to &quot;Other Resources&quot;">​</a></h2><p>See the <a href="./tap_hold">Tap-Hold Configuration Options</a> for additional flags that tweak Mod-Tap behavior.</p>', 26);
const _hoisted_27 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_27);
}
const mod_tap = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  mod_tap as default
};
