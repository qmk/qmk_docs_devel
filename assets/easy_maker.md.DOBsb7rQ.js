import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.Cauyuiy8.js";
const __pageData = JSON.parse('{"title":"Easy Maker - Build One-Off Projects In Configurator","description":"","frontmatter":{},"headers":[],"relativePath":"easy_maker.md","filePath":"easy_maker.md","lastUpdated":1751656200000}');
const _sfc_main = { name: "easy_maker.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="easy-maker-build-one-off-projects-in-configurator" tabindex="-1">Easy Maker - Build One-Off Projects In Configurator <a class="header-anchor" href="#easy-maker-build-one-off-projects-in-configurator" aria-label="Permalink to &quot;Easy Maker - Build One-Off Projects In Configurator&quot;">​</a></h1><p>Have you ever needed an easy way to program a controller, such as a Proton C or Teensy 2.0, for a one-off project you&#39;re building? QMK has you covered with the Easy Maker. Now you can create a firmware in minutes using QMK Configurator.</p><p>There are different styles of Easy Maker available depending on your needs:</p><ul><li><a href="https://config.qmk.fm/#/?filter=ez_maker/direct" target="_blank" rel="noreferrer">Direct Pin</a> - Connect a single switch to a single pin</li><li>Direct Pin + Backlight (Coming Soon) - Like Direct Pin but dedicates a single pin to <a href="./features/backlight">Backlight</a> control</li><li>Direct Pin + Numlock (Coming Soon) - Like Direct Pin but dedicates a single pin to the Numlock LED</li><li>Direct Pin + Capslock (Coming Soon) - Like Direct Pin but dedicates a single pin to the Capslock LED</li><li>Direct Pin + Encoder (Coming Soon) - Like Direct Pin but uses 2 pins to add a single rotary encoder</li></ul><h2 id="quickstart" tabindex="-1">Quickstart <a class="header-anchor" href="#quickstart" aria-label="Permalink to &quot;Quickstart&quot;">​</a></h2><p>The easiest way to get started is with the Direct Pin boards. This will assign a single key to each pin and you can short that pin to ground to activate it. Select your MCU from the Keyboard dropdown here:</p><ul><li><a href="https://config.qmk.fm/#/?filter=ez_maker/direct" target="_blank" rel="noreferrer">https://config.qmk.fm/#/?filter=ez_maker/direct</a></li></ul><p>For more details see the <a href="#direct-pin">Direct Pin</a> section.</p><h1 id="direct-pin" tabindex="-1">Direct Pin <a class="header-anchor" href="#direct-pin" aria-label="Permalink to &quot;Direct Pin&quot;">​</a></h1><p>As its name implies Direct Pin works by connecting one switch per pin. The other side of the switch should be connected to ground (VSS or GND.) You don&#39;t need any other components, your MCU has internal pull-up resistors so that the switch sensing can work.</p><p>Here is a schematic showing how we connect a single button to pin A3 on a ProMicro:</p><p><img src="https://i.imgur.com/JcDhZll.png" alt="Schematic diagram showing a ProMicro with a wire coming out of A3, connecting to the left side of a switch. Another wire comes out of the right side of the switch to connect to the Ground Plane."></p><p>Once you have wired your switches you can assign keycodes to each pin and build a firmware by selecting the MCU you are using from the Keyboard dropdown. Use this link to show only Easy Maker Direct Pin:</p><ul><li><a href="https://config.qmk.fm/#/?filter=ez_maker/direct" target="_blank" rel="noreferrer">https://config.qmk.fm/#/?filter=ez_maker/direct</a></li></ul>', 14);
const _hoisted_15 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_15);
}
const easy_maker = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  easy_maker as default
};
