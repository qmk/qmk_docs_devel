import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.Cauyuiy8.js";
const __pageData = JSON.parse('{"title":"Split Keyboard","description":"","frontmatter":{},"headers":[],"relativePath":"features/split_keyboard.md","filePath":"features/split_keyboard.md","lastUpdated":1751656200000}');
const _sfc_main = { name: "features/split_keyboard.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="split-keyboard" tabindex="-1">Split Keyboard <a class="header-anchor" href="#split-keyboard" aria-label="Permalink to &quot;Split Keyboard&quot;">​</a></h1><p>Many keyboards in the QMK Firmware repo are &quot;split&quot; keyboards. They use two controllers—one plugging into USB, and the second connected by a serial or an I<sup>2</sup>C connection over a TRRS or similar cable.</p><p>Split keyboards can have a lot of benefits, but there is some additional work needed to get them enabled.</p><p>QMK Firmware has a generic implementation that is usable by any board, as well as numerous board specific implementations.</p><p>For this, we will mostly be talking about the generic implementation used by the Let&#39;s Split and other keyboards.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>ARM split supports most QMK subsystems when using the &#39;serial&#39; and &#39;serial_usart&#39; drivers. I2C slave is currently unsupported.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Both sides must use the same MCU family, for eg two Pro Micro-compatible controllers or two Blackpills. Currently, mixing AVR and ARM is not possible as ARM vs AVR uses different method for serial communication, and are not compatible. Moreover Blackpill&#39;s uses 3.3v logic, and atmega32u4 uses 5v logic.</p></div><h2 id="compatibility-overview" tabindex="-1">Compatibility Overview <a class="header-anchor" href="#compatibility-overview" aria-label="Permalink to &quot;Compatibility Overview&quot;">​</a></h2><table><thead><tr><th>Transport</th><th>AVR</th><th>ARM</th></tr></thead><tbody><tr><td><a href="./../drivers/serial">&#39;serial&#39;</a></td><td>✔️</td><td>✅ <sup>1</sup></td></tr><tr><td>I2C</td><td>✔️</td><td></td></tr></tbody></table><p>Notes:</p><ol><li>Both hardware and software limitations are detailed within the <a href="./../drivers/serial">driver documentation</a>.</li></ol><h2 id="hardware-configuration" tabindex="-1">Hardware Configuration <a class="header-anchor" href="#hardware-configuration" aria-label="Permalink to &quot;Hardware Configuration&quot;">​</a></h2><p>This assumes that you&#39;re using two Pro Micro-compatible controllers, and are using TRRS jacks to connect to two halves.</p><h3 id="required-hardware" tabindex="-1">Required Hardware <a class="header-anchor" href="#required-hardware" aria-label="Permalink to &quot;Required Hardware&quot;">​</a></h3><p>Apart from diodes and key switches for the keyboard matrix in each half, you will need 2x TRRS sockets and 1x TRRS cable.</p><p>Alternatively, you can use any sort of cable and socket that has at least 3 wires.</p><p>If you want to use I<sup>2</sup>C to communicate between halves, you will need a cable with at least 4 wires and 2x 4.7kΩ pull-up resistors.</p><h4 id="considerations" tabindex="-1">Considerations <a class="header-anchor" href="#considerations" aria-label="Permalink to &quot;Considerations&quot;">​</a></h4><p>The most commonly used connection is a TRRS cable and jacks. These provide 4 wires, making them very useful for split keyboards, and are easy to find.</p><p>However, since one of the wires carries VCC, this means that the boards are not hot pluggable. You should always disconnect the board from USB before unplugging and plugging in TRRS cables, or you can short the controller, or worse.</p><p>Another option is to use phone cables (as in, old school RJ-11/RJ-14 cables). Make sure that you use one that actually supports 4 wires/lanes.</p><p>However, USB cables, SATA cables, and even just 4 wires have been known to be used for communication between the controllers.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Using USB cables for communication between the controllers works just fine, but the connector could be mistaken for a normal USB connection and potentially short out the keyboard, depending on how it&#39;s wired. For this reason, they are not recommended for connecting split keyboards.</p></div><h3 id="serial-wiring" tabindex="-1">Serial Wiring <a class="header-anchor" href="#serial-wiring" aria-label="Permalink to &quot;Serial Wiring&quot;">​</a></h3><p>The 3 wires of the TRS/TRRS cable need to connect GND, VCC, and D0/D1/D2/D3 (aka PD0/PD1/PD2/PD3) between the two Pro Micros.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Note that the pin used here is actually set by <code>SOFT_SERIAL_PIN</code> below.</p></div><img alt="sk-pd0-connection-mono" src="https://user-images.githubusercontent.com/2170248/92296488-28e9ad80-ef70-11ea-98be-c40cb48a0319.JPG" width="48%"><img alt="sk-pd2-connection-mono" src="https://user-images.githubusercontent.com/2170248/92296490-2d15cb00-ef70-11ea-801f-5ace313013e6.JPG" width="48%"><h3 id="i2c-wiring" tabindex="-1">I<sup>2</sup>C Wiring <a class="header-anchor" href="#i2c-wiring" aria-label="Permalink to &quot;I&lt;sup&gt;2&lt;/sup&gt;C Wiring&quot;">​</a></h3><p>The 4 wires of the TRRS cable need to connect GND, VCC, and SCL and SDA (aka PD0/pin 3 and PD1/pin 2, respectively) between the two Pro Micros.</p><p>The pull-up resistors may be placed on either half. If you wish to use the halves independently, it is also possible to use 4 resistors and have the pull-ups in both halves. Note that the total resistance for the connected system should be within spec at 2.2k-10kOhm, with an &#39;ideal&#39; at 4.7kOhm, regardless of the placement and number.</p><img alt="sk-i2c-connection-mono" src="https://user-images.githubusercontent.com/2170248/92297182-92b98580-ef77-11ea-9d7d-d6033914af43.JPG" width="50%"><h2 id="firmware-configuration" tabindex="-1">Firmware Configuration <a class="header-anchor" href="#firmware-configuration" aria-label="Permalink to &quot;Firmware Configuration&quot;">​</a></h2><p>To enable the split keyboard feature, add the following to your <code>rules.mk</code>:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SPLIT_KEYBOARD = yes</span></span></code></pre></div><p>If you&#39;re using a custom transport (communication method), then you will also need to add:</p><div class="language-make vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SPLIT_TRANSPORT = custom</span></span></code></pre></div><h3 id="layout-macro" tabindex="-1">Layout Macro <a class="header-anchor" href="#layout-macro" aria-label="Permalink to &quot;Layout Macro&quot;">​</a></h3><p>Configuring your layout in a split keyboard works slightly differently to a non-split keyboard. Take for example the following layout. The top left numbers refer to the matrix row and column, and the bottom right are the order of the keys in the layout:</p><p><img src="https://i.imgur.com/QeY6kMQ.png" alt="Physical layout"></p><p>Since the matrix scanning procedure operates on entire rows, it first populates the left half&#39;s rows, then the right half&#39;s. Thus, the matrix as QMK views it has double the rows instead of double the columns:</p><p><img src="https://i.imgur.com/4wjJzBU.png" alt="Matrix"></p><h3 id="setting-handedness" tabindex="-1">Setting Handedness <a class="header-anchor" href="#setting-handedness" aria-label="Permalink to &quot;Setting Handedness&quot;">​</a></h3><p>By default, the firmware does not know which side is which; it needs some help to determine that. There are several ways to do this, listed in order of precedence.</p><h4 id="handedness-by-pin" tabindex="-1">Handedness by Pin <a class="header-anchor" href="#handedness-by-pin" aria-label="Permalink to &quot;Handedness by Pin&quot;">​</a></h4><p>You can configure the firmware to read a pin on the controller to determine handedness. To do this, add the following to your <code>config.h</code> file:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_HAND_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B7</span></span></code></pre></div><p>This will read the specified pin. By default, if it&#39;s high, then the controller assumes it is the left hand, and if it&#39;s low, it&#39;s assumed to be the right side.</p><p>This behaviour can be flipped by adding this to you <code>config.h</code> file:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	SPLIT_HAND_PIN_LOW_IS_LEFT</span></span></code></pre></div><h4 id="handedness-by-matrix-pin" tabindex="-1">Handedness by Matrix Pin <a class="header-anchor" href="#handedness-by-matrix-pin" aria-label="Permalink to &quot;Handedness by Matrix Pin&quot;">​</a></h4><p>You can configure the firmware to read key matrix pins on the controller to determine handedness. To do this, add the following to your <code>config.h</code> file:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_HAND_MATRIX_GRID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> D0, F1</span></span></code></pre></div><p>The first pin is the output pin and the second is the input pin.</p><p>Some keyboards have unused intersections in the key matrix. This setting uses one of these unused intersections to determine the handedness.</p><p>Normally, when a diode is connected to an intersection, it is judged to be right. If you add the following definition, it will be judged to be left.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_HAND_MATRIX_GRID_LOW_IS_LEFT</span></span></code></pre></div><p>Note that adding a diode at a previously unused intersection will effectively tell the firmware that there is a key held down at that point. You can instruct qmk to ignore that intersection by defining <code>MATRIX_MASKED</code> and then defining a <code>matrix_row_t matrix_mask[MATRIX_ROWS]</code> array in your keyboard config. Each bit of a single value (starting form the least-significant bit) is used to tell qmk whether or not to pay attention to key presses at that intersection.</p><p>While <code>MATRIX_MASKED</code> isn&#39;t necessary to use <code>SPLIT_HAND_MATRIX_GRID</code> successfully, without it you may experience issues trying to suspend your computer with your keyboard attached as the matrix will always report at least one key-press.</p><h4 id="handedness-by-eeprom" tabindex="-1">Handedness by EEPROM <a class="header-anchor" href="#handedness-by-eeprom" aria-label="Permalink to &quot;Handedness by EEPROM&quot;">​</a></h4><p>This method sets the keyboard&#39;s handedness by setting a flag in the persistent storage (<code>EEPROM</code>). This is checked when the controller first starts up, and determines what half the keyboard is, and how to orient the keyboard layout.</p><p>To enable this method, add the following to your <code>config.h</code> file:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EE_HANDS</span></span></code></pre></div><p>Next, you will have to flash the correct handedness option to the controller on each halve. You can do this manually with the following bootloader targets using <code>qmk flash -kb &lt;keyboard&gt; -km &lt;keymap&gt; -bl &lt;bootloader&gt;</code> command to flash:</p><table><thead><tr><th>Microcontroller Type</th><th>Bootloader Parameter</th></tr></thead><tbody><tr><td>AVR controllers with Caterina bootloader<br>(e.g. Pro Micro)</td><td><code>avrdude-split-left</code><br><code>avrdude-split-right</code></td></tr><tr><td>AVR controllers with the stock Amtel DFU or DFU compatible bootloader<br>(e.g. Elite-C)</td><td><code>dfu-split-left</code><br><code>dfu-split-right</code></td></tr><tr><td>ARM controllers with a DFU compatible bootloader<br>(e.g. Proton-C)</td><td><code>dfu-util-split-left</code><br><code>dfu-util-split-right</code></td></tr><tr><td>ARM controllers with a UF2 compatible bootloader<br>(e.g. RP2040)</td><td><code>uf2-split-left</code><br><code>uf2-split-right</code></td></tr></tbody></table><p>Example for <code>crkbd/rev1</code> keyboard with normal AVR Pro Micro MCUs, reset the left controller and run:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>qmk flash -kb crkbd/rev1 -km default -bl avrdude-split-left</span></span></code></pre></div><p>Reset the right controller and run:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>qmk flash -kb crkbd/rev1 -km default -bl avrdude-split-right</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Some controllers (e.g. Blackpill with DFU compatible bootloader) will need to be flashed with handedness bootloader parameter every time because it is not retained between flashes.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://github.com/qmk/qmk_toolbox/releases/" target="_blank" rel="noreferrer">QMK Toolbox</a> can also be used to flash EEPROM handedness files. Place the controller in bootloader mode and select menu option Tools -&gt; EEPROM -&gt; Set Left/Right Hand</p></div><p>This setting is not changed when re-initializing the EEPROM using the <code>EE_CLR</code> key, or using the <code>eeconfig_init()</code> function. However, if you reset the EEPROM outside of the firmware&#39;s built in options (such as flashing a file that overwrites the <code>EEPROM</code>, like how the <a href="https://github.com/qmk/qmk_toolbox/releases/" target="_blank" rel="noreferrer">QMK Toolbox</a>&#39;s &quot;Reset EEPROM&quot; button works), you&#39;ll need to re-flash the controller with the <code>EEPROM</code> files.</p><p>You can find the <code>EEPROM</code> files in the QMK firmware repo, <a href="https://github.com/qmk/qmk_firmware/tree/master/quantum/split_common" target="_blank" rel="noreferrer">here</a>.</p><h4 id="handedness-by-define" tabindex="-1">Handedness by <code>#define</code> <a class="header-anchor" href="#handedness-by-define" aria-label="Permalink to &quot;Handedness by `#define`&quot;">​</a></h4><p>You can use this option when USB cable is always connected to just one side of the split keyboard.</p><p>If the USB cable is always connected to the right side, add the following to your <code>config.h</code> file and flash both sides with this option:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MASTER_RIGHT</span></span></code></pre></div><p>If the USB cable is always connected to the left side, add the following to your <code>config.h</code> file and flash both sides with this option:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MASTER_LEFT</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If neither options are defined, the handedness defaults to <code>MASTER_LEFT</code>.</p></div><h3 id="communication-options" tabindex="-1">Communication Options <a class="header-anchor" href="#communication-options" aria-label="Permalink to &quot;Communication Options&quot;">​</a></h3><p>Because not every split keyboard is identical, there are a number of additional options that can be configured in your <code>config.h</code> file.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> USE_I2C</span></span></code></pre></div><p>This configures the use of I<sup>2</sup>C support for split keyboard transport (AVR only).</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SOFT_SERIAL_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> D0</span></span></code></pre></div><p>This sets the pin to be used for serial communication. If you&#39;re not using serial, you shouldn&#39;t need to define this.</p><p>However, if you are using serial and I<sup>2</sup>C on the board, you will need to set this, and to something other than D0 and D1 (as these are used for I<sup>2</sup>C communication).</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SELECT_SOFT_SERIAL_SPEED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {#}</span></span></code></pre></div><p>If you&#39;re having issues with serial communication, you can change this value, as it controls the communication speed for serial. The default is 1, and the possible values are:</p><ul><li><strong><code>0</code></strong>: about 189kbps (Experimental only)</li><li><strong><code>1</code></strong>: about 137kbps (default)</li><li><strong><code>2</code></strong>: about 75kbps</li><li><strong><code>3</code></strong>: about 39kbps</li><li><strong><code>4</code></strong>: about 26kbps</li><li><strong><code>5</code></strong>: about 20kbps</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FORCED_SYNC_THROTTLE_MS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span></code></pre></div><p>This sets the maximum number of milliseconds before forcing a synchronization of data from master to slave. Under normal circumstances this sync occurs whenever the data <em>changes</em>, for safety a data transfer occurs after this number of milliseconds if no change has been detected since the last sync.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_MAX_CONNECTION_ERRORS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span></code></pre></div><p>This sets the maximum number of failed communication attempts (one per scan cycle) from the master part before it assumes that no slave part is connected. This makes it possible to use a master part without the slave part connected.</p><p>Set to 0 to disable the disconnection check altogether.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_CONNECTION_CHECK_TIMEOUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span></span></code></pre></div><p>How long (in milliseconds) the master part should block all connection attempts to the slave after the communication has been flagged as disconnected (see <code>SPLIT_MAX_CONNECTION_ERRORS</code> above).</p><p>One communication attempt will be allowed everytime this amount of time has passed since the last attempt. If that attempt succeeds, the communication is seen as working again.</p><p>Set to 0 to disable this throttling of communications while disconnected. This can save you a couple of bytes of firmware size.</p><h3 id="data-sync-options" tabindex="-1">Data Sync Options <a class="header-anchor" href="#data-sync-options" aria-label="Permalink to &quot;Data Sync Options&quot;">​</a></h3><p>The following sync options add overhead to the split communication protocol and may negatively impact the matrix scan speed when enabled. These can be enabled by adding the chosen option(s) to your <code>config.h</code> file.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_TRANSPORT_MIRROR</span></span></code></pre></div><p>This mirrors the master side matrix to the slave side for features that react or require knowledge of master side key presses on the slave side. The purpose of this feature is to support cosmetic use of key events (e.g. RGB reacting to keypresses).</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_LAYER_STATE_ENABLE</span></span></code></pre></div><p>This enables syncing of the layer state between both halves of the split keyboard. The main purpose of this feature is to enable support for use of things like OLED display of the currently active layer.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_LED_STATE_ENABLE</span></span></code></pre></div><p>This enables syncing of the Host LED status (caps lock, num lock, etc) between both halves of the split keyboard. The main purpose of this feature is to enable support for use of things like OLED display of the Host LED status.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_MODS_ENABLE</span></span></code></pre></div><p>This enables transmitting modifier state (normal, weak, oneshot and oneshot locked) to the non primary side of the split keyboard. The purpose of this feature is to support cosmetic use of modifer state (e.g. displaying status on an OLED screen).</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_WPM_ENABLE</span></span></code></pre></div><p>This enables transmitting the current WPM to the slave side of the split keyboard. The purpose of this feature is to support cosmetic use of WPM (e.g. displaying the current value on an OLED screen).</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_OLED_ENABLE</span></span></code></pre></div><p>This enables transmitting the current OLED on/off status to the slave side of the split keyboard. The purpose of this feature is to support state (on/off state only) syncing.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_ST7565_ENABLE</span></span></code></pre></div><p>This enables transmitting the current ST7565 on/off status to the slave side of the split keyboard. The purpose of this feature is to support state (on/off state only) syncing.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_POINTING_ENABLE</span></span></code></pre></div><p>This enables transmitting the pointing device status to the master side of the split keyboard. The purpose of this feature is to enable use pointing devices on the slave side.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>There is additional required configuration for <code>SPLIT_POINTING_ENABLE</code> outlined in the <a href="./pointing_device#split-keyboard-configuration">pointing device documentation</a>.</p></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_HAPTIC_ENABLE</span></span></code></pre></div><p>This enables the triggering of haptic feedback on the slave side of the split keyboard. This will send information to the slave side such as the mode, dwell, and whether buzz is enabled.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_ACTIVITY_ENABLE</span></span></code></pre></div><p>This synchronizes the activity timestamps between sides of the split keyboard, allowing for activity timeouts to occur.</p><h3 id="custom-data-sync" tabindex="-1">Custom data sync between sides <a class="header-anchor" href="#custom-data-sync" aria-label="Permalink to &quot;Custom data sync between sides {#custom-data-sync}&quot;">​</a></h3><p>QMK&#39;s split transport allows for arbitrary data transactions at both the keyboard and user levels. This is modelled on a remote procedure call, with the master invoking a function on the slave side, with the ability to send data from master to slave, process it slave side, and send data back from slave to master.</p><p>To leverage this, a keyboard or user/keymap can define a comma-separated list of <em>transaction IDs</em>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// for keyboard-level data sync:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_TRANSACTION_IDS_KB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KEYBOARD_SYNC_A, KEYBOARD_SYNC_B</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or, for user:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_TRANSACTION_IDS_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USER_SYNC_A, USER_SYNC_B, USER_SYNC_C</span></span></code></pre></div><p>These <em>transaction IDs</em> then need a slave-side handler function to be registered with the split transport, for example:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _master_to_slave_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2s_data;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">master_to_slave_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _slave_to_master_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2m_data;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slave_to_master_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user_sync_a_slave_handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> in_buflen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> in_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> out_buflen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> out_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> master_to_slave_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m2s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> master_to_slave_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)in_data;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    slave_to_master_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s2m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slave_to_master_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)out_data;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s2m-&gt;s2m_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2s-&gt;m2s_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // whatever comes in, add 5 so it can be sent back</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keyboard_post_init_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transaction_register_rpc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(USER_SYNC_A, user_sync_a_slave_handler);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The master side can then invoke the slave-side handler - for normal keyboard functionality to be minimally affected, any keyboard- or user-level code attempting to sync data should be throttled:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> housekeeping_task_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_keyboard_master</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Interact with slave every 500ms</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_sync </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timer_elapsed32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(last_sync) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            master_to_slave_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            slave_to_master_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transaction_rpc_exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(USER_SYNC_A, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m2s), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m2s, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s2m), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s2m)) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                last_sync </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timer_read32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                dprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Slave value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s2m.s2m_data);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // this will now be 11, as the slave adds 5</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                dprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Slave sync failed!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is recommended that any data sync between halves happens during the master side&#39;s <em>housekeeping task</em>. This ensures timely retries should failures occur.</p></div><p>If only one-way data transfer is needed, helper methods are provided:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transaction_rpc_exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> transaction_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> initiator2target_buffer_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">initiator2target_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> target2initiator_buffer_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target2initiator_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transaction_rpc_send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> transaction_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> initiator2target_buffer_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">initiator2target_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transaction_rpc_recv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> transaction_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> target2initiator_buffer_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target2initiator_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>By default, the inbound and outbound data is limited to a maximum of 32 bytes each. The sizes can be altered if required:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Master to slave:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RPC_M2S_BUFFER_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Slave to master:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RPC_S2M_BUFFER_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span></span></code></pre></div><h3 id="hardware-configuration-options" tabindex="-1">Hardware Configuration Options <a class="header-anchor" href="#hardware-configuration-options" aria-label="Permalink to &quot;Hardware Configuration Options&quot;">​</a></h3><p>There are some settings that you may need to configure, based on how the hardware is set up.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MATRIX_ROW_PINS_RIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">row pins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MATRIX_COL_PINS_RIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">col pins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>This allows you to specify a different set of pins for the matrix on the right side. This is useful if you have a board with differently-shaped halves that requires a different configuration (such as Keebio&#39;s Quefrency). The number of pins in the right and left matrices must be the same, if you have a board with a different number of rows or columns on one side, pad out the extra spaces with <code>NO_PIN</code> and make sure you add the unused rows or columns to your matrix.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DIRECT_PINS_RIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } }</span></span></code></pre></div><p>This allows you to specify a different set of direct pins for the right side.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ENCODER_A_PINS_RIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { encoder1a, encoder2a }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ENCODER_B_PINS_RIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { encoder1b, encoder2b }</span></span></code></pre></div><p>This allows you to specify a different set of encoder pins for the right side.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGBLIGHT_SPLIT</span></span></code></pre></div><p>This option enables synchronization of the RGB Light modes between the controllers of the split keyboard. This is for keyboards that have RGB LEDs that are directly wired to the controller (that is, they are not using the &quot;extra data&quot; option on the TRRS cable).</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGBLED_SPLIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>This sets how many LEDs are directly connected to each controller. The first number is the left side, and the second number is the right side.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This setting implies that <code>RGBLIGHT_SPLIT</code> is enabled, and will forcibly enable it, if it&#39;s not.</p></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_USB_DETECT</span></span></code></pre></div><p>Enabling this option changes the startup behavior to listen for an active USB communication to delegate which part is master and which is slave. With this option enabled and active USB communication, then that half assumes it is the master, otherwise it assumes it is the slave.</p><p>Without this option, the master is the half that can detect voltage on the physical USB connection (VBUS detection).</p><p>Enabled by default on ChibiOS/ARM.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This setting will stop the ability to demo using battery packs.</p></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_USB_TIMEOUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span></span></code></pre></div><p>This sets the maximum timeout when detecting master/slave when using <code>SPLIT_USB_DETECT</code>.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_USB_TIMEOUT_POLL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span></code></pre></div><p>This sets the poll frequency when detecting master/slave when using <code>SPLIT_USB_DETECT</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_WATCHDOG_ENABLE</span></span></code></pre></div><p>This will enable a software watchdog on any side delegated as slave and will reboot the keyboard if no successful communication occurs within <code>SPLIT_WATCHDOG_TIMEOUT</code>. This can be particularly helpful when <code>SPLIT_USB_DETECT</code> delegates both sides as slave in some circumstances.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SPLIT_WATCHDOG_TIMEOUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span></code></pre></div><p>This set the maximum slave timeout when waiting for communication from master when using <code>SPLIT_WATCHDOG_ENABLE</code></p><h2 id="hardware-considerations-and-mods" tabindex="-1">Hardware Considerations and Mods <a class="header-anchor" href="#hardware-considerations-and-mods" aria-label="Permalink to &quot;Hardware Considerations and Mods&quot;">​</a></h2><p>Master/slave delegation is made either by detecting voltage on VBUS connection or waiting for USB communication (<code>SPLIT_USB_DETECT</code>). Pro Micro boards can use VBUS detection out of the box and be used with or without <code>SPLIT_USB_DETECT</code>.</p><p>Many ARM boards, but not all, do not support VBUS detection. Because it is common that ARM boards lack VBUS detection, <code>SPLIT_USB_DETECT</code> is automatically defined on ARM targets (technically when ChibiOS is targetted).</p><h3 id="teensy-boards" tabindex="-1">Teensy boards <a class="header-anchor" href="#teensy-boards" aria-label="Permalink to &quot;Teensy boards&quot;">​</a></h3><p>Teensy boards lack VBUS detection out of the box and must have <code>SPLIT_USB_DETECT</code> defined. With the Teensy 2.0 and Teensy++ 2.0, there is a simple hardware mod that you can perform to add VBUS detection, so you don&#39;t need the <code>SPLIT_USB_DETECT</code> option.</p><p>You&#39;ll only need a few things:</p><ul><li>A knife (x-acto knife, ideally)</li><li>A solder station or hot air station</li><li>An appropriate Schottky diode, such as the <a href="https://www.digikey.com/en/products/detail/nexperia-usa-inc/PMEG2005EH,115/1589924" target="_blank" rel="noreferrer">PMEG2005EH</a></li></ul><p>You&#39;ll need to cut the small trace between the 5V and center pads on the back of the Teensy.</p><p>Once you have done that, you will want to solder the diode from the 5V pad to the center pad.</p><p>You may need to use the 5V pad from the regulator block above as the pads were too small and placed too closely together to place the Schottky diode properly.</p><p><img src="https://i.imgur.com/BPEC5n5.png" alt="Teensy++ 2.0"></p><h2 id="additional-resources" tabindex="-1">Additional Resources <a class="header-anchor" href="#additional-resources" aria-label="Permalink to &quot;Additional Resources&quot;">​</a></h2><p>Nicinabox has a <a href="https://github.com/nicinabox/lets-split-guide" target="_blank" rel="noreferrer">very nice and detailed guide</a> for the Let&#39;s Split keyboard, that covers most everything you need to know, including troubleshooting information.</p><p>However, the RGB Light section is out of date, as it was written long before the RGB Split code was added to QMK Firmware. Instead, wire each strip up directly to the controller.</p>', 175);
const _hoisted_176 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_176);
}
const split_keyboard = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  split_keyboard as default
};
