import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.Cauyuiy8.js";
const __pageData = JSON.parse('{"title":"Tap-Hold Configuration Options","description":"","frontmatter":{},"headers":[],"relativePath":"tap_hold.md","filePath":"tap_hold.md","lastUpdated":1751656200000}');
const _sfc_main = { name: "tap_hold.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="tap-hold-configuration-options" tabindex="-1">Tap-Hold Configuration Options <a class="header-anchor" href="#tap-hold-configuration-options" aria-label="Permalink to &quot;Tap-Hold Configuration Options&quot;">​</a></h1><p>While Tap-Hold options are fantastic, they are not without their issues. We have tried to configure them with reasonable defaults, but that may still cause issues for some people.</p><p>These options let you modify the behavior of the Tap-Hold keys.</p><h2 id="tapping-term" tabindex="-1">Tapping Term <a class="header-anchor" href="#tapping-term" aria-label="Permalink to &quot;Tapping Term&quot;">​</a></h2><p>The crux of all of the following features is the tapping term setting. This determines what is a tap and what is a hold. The exact timing for this to feel natural can vary from keyboard to keyboard, from switch to switch, and from key to key.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>DYNAMIC_TAPPING_TERM_ENABLE</code> enables three special keys that can help you quickly find a comfortable tapping term for you. See &quot;Dynamic Tapping Term&quot; for more details.</p></div><p>You can set the global time for this by adding the following setting to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TAPPING_TERM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span></code></pre></div><p>This setting is defined in milliseconds and defaults to 200ms. This is a good average for the majority of people.</p><p>For more granular control of this feature, you can add the following to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TAPPING_TERM_PER_KEY</span></span></code></pre></div><p>You can then add the following function to your keymap:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_tapping_term</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SFT_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_SPC):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TAPPING_TERM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1250</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, KC_GRV):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 130</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TAPPING_TERM;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="dynamic-tapping-term" tabindex="-1">Dynamic Tapping Term <a class="header-anchor" href="#dynamic-tapping-term" aria-label="Permalink to &quot;Dynamic Tapping Term {#dynamic-tapping-term}&quot;">​</a></h3><p><code>DYNAMIC_TAPPING_TERM_ENABLE</code> is a feature you can enable in <code>rules.mk</code> that lets you use three special keys in your keymap to configure the tapping term on the fly.</p><table><thead><tr><th>Key</th><th>Aliases</th><th>Description</th></tr></thead><tbody><tr><td><code>QK_DYNAMIC_TAPPING_TERM_PRINT</code></td><td><code>DT_PRNT</code></td><td>Types the current tapping term, in milliseconds</td></tr><tr><td><code>QK_DYNAMIC_TAPPING_TERM_UP</code></td><td><code>DT_UP</code></td><td>Increases the current tapping term by <code>DYNAMIC_TAPPING_TERM_INCREMENT</code>ms (5ms by default)</td></tr><tr><td><code>QK_DYNAMIC_TAPPING_TERM_DOWN</code></td><td><code>DT_DOWN</code></td><td>Decreases the current tapping term by <code>DYNAMIC_TAPPING_TERM_INCREMENT</code>ms (5ms by default)</td></tr></tbody></table><p>Set the tapping term as usual with <code>#define TAPPING_TERM &lt;value&gt;</code> in <code>config.h</code> and add <code>DYNAMIC_TAPPING_TERM_ENABLE = yes</code> in <code>rules.mk</code>. Then, place the above three keys somewhere in your keymap and flash the new firmware onto your board.</p><p>Now, you can try using your dual-role keys, such as layer-taps and mod-taps, and use <code>DT_DOWN</code> and <code>DT_UP</code> to adjust the tapping term immediately. If you find that you frequently trigger the modifier of your mod-tap(s) by accident, for example, that&#39;s a sign that your tapping term may be too low so tap <code>DT_UP</code> a few times to increase the tapping term until that no longer happens. On the flip side, if you get superfluous characters when you actually intended to momentarily activate a layer, tap <code>DT_DOWN</code> to lower the tapping term. Do note that these keys affect the <em>global</em> tapping term, you cannot change the tapping term of a specific key on the fly.</p><p>Once you&#39;re satisfied with the current tapping term value, open <code>config.h</code> and replace whatever value you first wrote for the tapping term by the output of the <code>DT_PRNT</code> key.</p><p>It&#39;s important to update <code>TAPPING_TERM</code> with the new value because the adjustments made using <code>DT_UP</code> and <code>DT_DOWN</code> are not persistent.</p><p>The value by which the tapping term increases or decreases when you tap <code>DT_UP</code> and <code>DT_DOWN</code> can be configured in <code>config.h</code> with <code>#define DYNAMIC_TAPPING_TERM_INCREMENT &lt;new value&gt;</code>. Note that the tapping term is <em>not</em> modified when holding down the tap term keys so if you need to, for example, decrease the current tapping term by 50ms, you cannot just press down and hold <code>DT_DOWN</code>; you will have to tap it 10 times in a row with the default increment of 5ms.</p><p>If you need more flexibility, nothing prevents you from defining your own custom keys to dynamically change the tapping term.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> custom_dynamic_tapping_term_keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DT_UP_50 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SAFE_RANGE,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DT_DOWN_50,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DT_UP_X2,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DT_DOWN_X2,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_record_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DT_UP_50:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            g_tapping_term </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DT_DOWN_50:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            g_tapping_term </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DT_UP_X2:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            g_tapping_term </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DT_DOWN_X2:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.pressed) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            g_tapping_term </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>In order for this feature to be effective if you use per-key tapping terms, you need to make a few changes to the syntax of the <code>get_tapping_term</code> function. All you need to do is replace every occurrence of <code>TAPPING_TERM</code> in the <code>get_tapping_term</code> function by lowercase <code>g_tapping_term</code>. If you don&#39;t do that, you will still see the value typed by <code>DT_PRNT</code> go up and down as you configure the tapping term on the fly but you won&#39;t feel those changes as they don&#39;t get applied. If you can go as low as 10ms and still easily trigger the tap function of a dual-role key, that&#39;s a sign that you forgot to make the necessary changes to your <code>get_tapping_term</code> function.</p><p>For instance, here&#39;s how the example <code>get_tapping_term</code> shown earlier should look after the transformation:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_tapping_term</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SFT_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_SPC):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g_tapping_term </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1250</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, KC_GRV):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 130</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g_tapping_term;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The reason is that <code>TAPPING_TERM</code> is a macro that expands to a constant integer and thus cannot be changed at runtime whereas <code>g_tapping_term</code> is a variable whose value can be changed at runtime. If you want, you can temporarily enable <code>DYNAMIC_TAPPING_TERM_ENABLE</code> to find a suitable tapping term value and then disable that feature and revert back to using the classic syntax for per-key tapping term settings. In case you need to access the tapping term from elsewhere in your code, you can use the <code>GET_TAPPING_TERM(keycode, record)</code> macro. This macro will expand to whatever is the appropriate access pattern given the current configuration.</p><h2 id="tap-or-hold-decision-modes" tabindex="-1">Tap-Or-Hold Decision Modes <a class="header-anchor" href="#tap-or-hold-decision-modes" aria-label="Permalink to &quot;Tap-Or-Hold Decision Modes&quot;">​</a></h2><p>The code which decides between the tap and hold actions of dual-role keys supports three different modes, in increasing order of preference for the hold action:</p><ol><li><p>The default mode selects the hold action only if the dual-role key is held down longer than the tapping term. In this mode pressing other keys while the dual-role key is held down does not influence the tap-or-hold decision. In other words, this mode ignores interrupts.</p></li><li><p>The “permissive hold” mode, in addition to the default behavior, immediately selects the hold action when another key is tapped (pressed and then released) while the dual-role key is held down, even if this happens earlier than the tapping term. If another key is just pressed, but then the dual-role key is released before that other key (and earlier than the tapping term), this mode will still select the tap action.</p></li><li><p>The “hold on other key press” mode, in addition to the default behavior, immediately selects the hold action when another key is pressed while the dual-role key is held down, even if this happens earlier than the tapping term.</p></li></ol><p>Note that until the tap-or-hold decision completes (which happens when either the dual-role key is released, or the tapping term has expired, or the extra condition for the selected decision mode is satisfied), key events are delayed and not transmitted to the host immediately. The default mode gives the most delay (if the dual-role key is held down, this mode always waits for the whole tapping term), and the other modes may give less delay when other keys are pressed, because the hold action may be selected earlier.</p><h3 id="comparison" tabindex="-1">Comparison <a class="header-anchor" href="#comparison" aria-label="Permalink to &quot;Comparison {#comparison}&quot;">​</a></h3><p>To better illustrate the tap-or-hold decision modes, let us compare the expected output of each decision mode in a handful of tapping scenarios involving a mod-tap key (<code>LSFT_T(KC_A)</code>) and a regular key (<code>KC_B</code>) with the <code>TAPPING_TERM</code> set to 200ms.</p><p>Note: &quot;<code>kc</code> held&quot; in the &quot;Physical key event&quot; column means that the key wasn&#39;t physically released yet at this point in time.</p><h4 id="distinct-taps" tabindex="-1">Distinct taps (AABB) <a class="header-anchor" href="#distinct-taps" aria-label="Permalink to &quot;Distinct taps (AABB) {#distinct-taps}&quot;">​</a></h4><table><thead><tr><th>Time</th><th>Physical key event</th><th>Default</th><th><code>PERMISSIVE_HOLD</code></th><th><code>HOLD_ON_OTHER_KEY_PRESS</code></th></tr></thead><tbody><tr><td>0</td><td><code>LSFT_T(KC_A)</code> down</td><td></td><td></td><td></td></tr><tr><td>199</td><td><code>LSFT_T(KC_A)</code> up</td><td>a</td><td>a</td><td>a</td></tr><tr><td>210</td><td><code>KC_B</code> down</td><td>ab</td><td>ab</td><td>ab</td></tr><tr><td>220</td><td><code>KC_B</code> up</td><td>ab</td><td>ab</td><td>ab</td></tr></tbody></table><table><thead><tr><th>Time</th><th>Physical key event</th><th>Default</th><th><code>PERMISSIVE_HOLD</code></th><th><code>HOLD_ON_OTHER_KEY_PRESS</code></th></tr></thead><tbody><tr><td>0</td><td><code>LSFT_T(KC_A)</code> down</td><td></td><td></td><td></td></tr><tr><td>200</td><td><code>LSFT_T(KC_A)</code> held</td><td><kbd>Shift</kbd></td><td><kbd>Shift</kbd></td><td><kbd>Shift</kbd></td></tr><tr><td>201</td><td><code>LSFT_T(KC_A)</code> up</td><td><kbd>Shift</kbd></td><td><kbd>Shift</kbd></td><td><kbd>Shift</kbd></td></tr><tr><td>205</td><td><code>KC_B</code> down</td><td>b</td><td>b</td><td>b</td></tr><tr><td>210</td><td><code>KC_B</code> up</td><td>b</td><td>b</td><td>b</td></tr></tbody></table><h4 id="nested-tap" tabindex="-1">Nested tap (ABBA) <a class="header-anchor" href="#nested-tap" aria-label="Permalink to &quot;Nested tap (ABBA) {#nested-tap}&quot;">​</a></h4><table><thead><tr><th>Time</th><th>Physical key event</th><th>Default</th><th><code>PERMISSIVE_HOLD</code></th><th><code>HOLD_ON_OTHER_KEY_PRESS</code></th></tr></thead><tbody><tr><td>0</td><td><code>LSFT_T(KC_A)</code> down</td><td></td><td></td><td></td></tr><tr><td>110</td><td><code>KC_B</code> down</td><td></td><td></td><td>B</td></tr><tr><td>120</td><td><code>KC_B</code> up</td><td></td><td>B</td><td>B</td></tr><tr><td>199</td><td><code>LSFT_T(KC_A)</code> up</td><td>ab</td><td>B</td><td>B</td></tr></tbody></table><table><thead><tr><th>Time</th><th>Physical key event</th><th>Default</th><th><code>PERMISSIVE_HOLD</code></th><th><code>HOLD_ON_OTHER_KEY_PRESS</code></th></tr></thead><tbody><tr><td>0</td><td><code>LSFT_T(KC_A)</code> down</td><td></td><td></td><td></td></tr><tr><td>110</td><td><code>KC_B</code> down</td><td></td><td></td><td>B</td></tr><tr><td>120</td><td><code>KC_B</code> up</td><td></td><td>B</td><td>B</td></tr><tr><td>200</td><td><code>LSFT_T(KC_A)</code> held</td><td>B</td><td>B</td><td>B</td></tr><tr><td>210</td><td><code>LSFT_T(KC_A)</code> up</td><td>B</td><td>B</td><td>B</td></tr></tbody></table><table><thead><tr><th>Time</th><th>Physical key event</th><th>Default</th><th><code>PERMISSIVE_HOLD</code></th><th><code>HOLD_ON_OTHER_KEY_PRESS</code></th></tr></thead><tbody><tr><td>0</td><td><code>LSFT_T(KC_A)</code> down</td><td></td><td></td><td></td></tr><tr><td>200</td><td><code>LSFT_T(KC_A)</code> held</td><td><kbd>Shift</kbd></td><td><kbd>Shift</kbd></td><td><kbd>Shift</kbd></td></tr><tr><td>205</td><td><code>KC_B</code> down</td><td>B</td><td>B</td><td>B</td></tr><tr><td>210</td><td><code>KC_B</code> up</td><td>B</td><td>B</td><td>B</td></tr><tr><td>220</td><td><code>LSFT_T(KC_A)</code> up</td><td>B</td><td>B</td><td>B</td></tr></tbody></table><h4 id="rolling-keys" tabindex="-1">Rolling keys (ABAB) <a class="header-anchor" href="#rolling-keys" aria-label="Permalink to &quot;Rolling keys (ABAB) {#rolling-keys}&quot;">​</a></h4><table><thead><tr><th>Time</th><th>Physical key event</th><th>Default</th><th><code>PERMISSIVE_HOLD</code></th><th><code>HOLD_ON_OTHER_KEY_PRESS</code></th></tr></thead><tbody><tr><td>0</td><td><code>LSFT_T(KC_A)</code> down</td><td></td><td></td><td></td></tr><tr><td>110</td><td><code>KC_B</code> down</td><td></td><td></td><td>B</td></tr><tr><td>130</td><td><code>LSFT_T(KC_A)</code> up</td><td>ab</td><td>ab</td><td>B</td></tr><tr><td>140</td><td><code>KC_B</code> up</td><td>ab</td><td>ab</td><td>B</td></tr></tbody></table><table><thead><tr><th>Time</th><th>Physical key event</th><th>Default</th><th><code>PERMISSIVE_HOLD</code></th><th><code>HOLD_ON_OTHER_KEY_PRESS</code></th></tr></thead><tbody><tr><td>0</td><td><code>LSFT_T(KC_A)</code> down</td><td></td><td></td><td></td></tr><tr><td>110</td><td><code>KC_B</code> down</td><td></td><td></td><td>B</td></tr><tr><td>200</td><td><code>LSFT_T(KC_A)</code> held</td><td>B</td><td>B</td><td>B</td></tr><tr><td>205</td><td><code>LSFT_T(KC_A)</code> up</td><td>B</td><td>B</td><td>B</td></tr><tr><td>210</td><td><code>KC_B</code> up</td><td>B</td><td>B</td><td>B</td></tr></tbody></table><h3 id="default-mode" tabindex="-1">Default Mode <a class="header-anchor" href="#default-mode" aria-label="Permalink to &quot;Default Mode&quot;">​</a></h3><p>Example sequence 1 (the <code>L</code> key is also mapped to <code>KC_RGHT</code> on layer 2):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>             TAPPING_TERM</span></span>\n<span class="line"><span>  +---------------|--------------------+</span></span>\n<span class="line"><span>  | +-------------|-------+            |</span></span>\n<span class="line"><span>  | | LT(2, KC_A) |       |            |</span></span>\n<span class="line"><span>  | +-------------|-------+            |</span></span>\n<span class="line"><span>  |               | +--------------+   |</span></span>\n<span class="line"><span>  |               | | KC_L         |   |</span></span>\n<span class="line"><span>  |               | +--------------+   |</span></span>\n<span class="line"><span>  +---------------|--------------------+</span></span></code></pre></div><p>The above sequence would send a <code>KC_RGHT</code>, since <code>LT(2, KC_A)</code> is held longer than the <code>TAPPING_TERM</code>.</p><hr><p>Example sequence 2 (the <code>L</code> key is also mapped to <code>KC_RGHT</code> on layer 2):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>                           TAPPING_TERM</span></span>\n<span class="line"><span>  +-----------------------------|------+</span></span>\n<span class="line"><span>  | +---------------+           |      |</span></span>\n<span class="line"><span>  | | LT(2, KC_A)   |           |      |</span></span>\n<span class="line"><span>  | +---------------+           |      |</span></span>\n<span class="line"><span>  |            +--------------+ |      |</span></span>\n<span class="line"><span>  |            | KC_L         | |      |</span></span>\n<span class="line"><span>  |            +--------------+ |      |</span></span>\n<span class="line"><span>  +-----------------------------|------+</span></span></code></pre></div><p>The above sequence will not send <code>KC_RGHT</code> but <code>KC_A</code> <code>KC_L</code> instead, since <code>LT(2, KC_A)</code> is not held longer than the <code>TAPPING_TERM</code>.</p><hr><p>Example sequence 3 (Mod Tap):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>                         TAPPING_TERM</span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span>\n<span class="line"><span>  | +-------------+           |        |</span></span>\n<span class="line"><span>  | | SFT_T(KC_A) |           |        |</span></span>\n<span class="line"><span>  | +-------------+           |        |</span></span>\n<span class="line"><span>  |       +--------------+    |        |</span></span>\n<span class="line"><span>  |       | KC_X         |    |        |</span></span>\n<span class="line"><span>  |       +--------------+    |        |</span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span></code></pre></div><p>In the above sequence, <code>SFT_T(KC_A)</code> has been released before the end of its <code>TAPPING_TERM</code> and as such will be interpreted as <code>KC_A</code>, followed by any key event that happened after the initial press of <code>SFT_T(KC_A)</code>. In this instance, the output would be <code>KC_A</code> <code>KC_X</code>.</p><h3 id="permissive-hold" tabindex="-1">Permissive Hold <a class="header-anchor" href="#permissive-hold" aria-label="Permalink to &quot;Permissive Hold&quot;">​</a></h3><p>The “permissive hold” mode can be enabled for all dual-role keys by adding the corresponding option to <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PERMISSIVE_HOLD</span></span></code></pre></div><p>This makes tap and hold keys (like Layer Tap) work better for fast typists, or for high <code>TAPPING_TERM</code> settings.</p><p>If you press a dual-role key, tap another key (press and release) and then release the dual-role key, all within the tapping term, by default the dual-role key will perform its tap action. If the <code>PERMISSIVE_HOLD</code> option is enabled, the dual-role key will perform its hold action instead.</p><p>An example of a sequence that is affected by the “permissive hold” mode:</p><ul><li><code>LT(2, KC_A)</code> Down</li><li><code>KC_L</code> Down (the <code>L</code> key is also mapped to <code>KC_RGHT</code> on layer 2)</li><li><code>KC_L</code> Up</li><li><code>LT(2, KC_A)</code> Up</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>                         TAPPING_TERM   </span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span>\n<span class="line"><span>  | +----------------------+  |        |</span></span>\n<span class="line"><span>  | | LT(2, KC_A)          |  |        |</span></span>\n<span class="line"><span>  | +----------------------+  |        |</span></span>\n<span class="line"><span>  |    +--------------+       |        |</span></span>\n<span class="line"><span>  |    | KC_L         |       |        |</span></span>\n<span class="line"><span>  |    +--------------+       |        |</span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span></code></pre></div><p>Normally, if you do all this within the <code>TAPPING_TERM</code> (default: 200ms), this will be registered as <code>al</code> by the firmware and host system. With the <code>PERMISSIVE_HOLD</code> option enabled, the Layer Tap key is considered as a layer switch if another key is tapped, and the above sequence would be registered as <code>KC_RGHT</code> (the mapping of <code>L</code> on layer 2). We could describe this sequence as a “nested tap” (the modified key&#39;s key down and key up events are “nested” between the dual-role key&#39;s key down and key up events).</p><p>However, this slightly different sequence will not be affected by the “permissive hold” mode:</p><ul><li><code>LT(2, KC_A)</code> Down</li><li><code>KC_L</code> Down (the <code>L</code> key is also mapped to <code>KC_RGHT</code> on layer 2)</li><li><code>LT(2, KC_A)</code> Up</li><li><code>KC_L</code> Up</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>                         TAPPING_TERM   </span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span>\n<span class="line"><span>  | +-------------+           |        |</span></span>\n<span class="line"><span>  | | LT(2, KC_A) |           |        |</span></span>\n<span class="line"><span>  | +-------------+           |        |</span></span>\n<span class="line"><span>  |       +--------------+    |        |</span></span>\n<span class="line"><span>  |       | KC_L         |    |        |</span></span>\n<span class="line"><span>  |       +--------------+    |        |</span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span></code></pre></div><p>In the sequence above the dual-role key is released before the other key is released, and if that happens within the tapping term, the “permissive hold” mode will still choose the tap action for the dual-role key, and the sequence will be registered as <code>al</code> by the host. We could describe this as a “rolling press” (the two keys&#39; key down and key up events behave as if you were rolling a ball across the two keys, first pressing each key down in sequence and then releasing them in the same order).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>PERMISSIVE_HOLD</code> option is not noticeable if you also enable <code>HOLD_ON_OTHER_KEY_PRESS</code> because the latter option considers both the “nested tap” and “rolling press” sequences like shown above as a hold action, not the tap action. <code>HOLD_ON_OTHER_KEY_PRESS</code> makes the Tap-Or-Hold decision earlier in the chain of key events, thus taking a precedence over <code>PERMISSIVE_HOLD</code>.</p></div><p>For more granular control of this feature, you can add the following to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PERMISSIVE_HOLD_PER_KEY</span></span></code></pre></div><p>You can then add the following function to your keymap:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_permissive_hold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, KC_BSPC):</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Immediately select the hold action when another key is tapped.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Do not select the hold action when another key is tapped.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="hold-on-other-key-press" tabindex="-1">Hold On Other Key Press <a class="header-anchor" href="#hold-on-other-key-press" aria-label="Permalink to &quot;Hold On Other Key Press&quot;">​</a></h3><p>The “hold on other key press” mode can be enabled for all dual-role keys by adding the corresponding option to <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HOLD_ON_OTHER_KEY_PRESS</span></span></code></pre></div><p>This mode makes tap and hold keys (like Layer Tap) work better for fast typists, or for high <code>TAPPING_TERM</code> settings. Compared to the “permissive hold” mode, this mode selects the hold action in more cases.</p><p>If you press a dual-role key, press another key, and then release the dual-role key, all within the tapping term, by default the dual-role key will perform its tap action. If the <code>HOLD_ON_OTHER_KEY_PRESS</code> option is enabled, the dual-role key will perform its hold action instead.</p><p>An example of a sequence that is affected by the “hold on other key press” mode, but not by the “permissive hold” mode:</p><ul><li><code>LT(2, KC_A)</code> Down</li><li><code>KC_L</code> Down (the <code>L</code> key is also mapped to <code>KC_RGHT</code> on layer 2)</li><li><code>LT(2, KC_A)</code> Up</li><li><code>KC_L</code> Up</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>                         TAPPING_TERM</span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span>\n<span class="line"><span>  | +-------------+           |        |</span></span>\n<span class="line"><span>  | | LT(2, KC_A) |           |        |</span></span>\n<span class="line"><span>  | +-------------+           |        |</span></span>\n<span class="line"><span>  |       +--------------+    |        |</span></span>\n<span class="line"><span>  |       | KC_L         |    |        |</span></span>\n<span class="line"><span>  |       +--------------+    |        |</span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span></code></pre></div><p>Normally, if you do all this within the <code>TAPPING_TERM</code> (default: 200ms), this will be registered as <code>al</code> by the firmware and host system. With the <code>HOLD_ON_OTHER_KEY_PRESS</code> option enabled, the Layer Tap key is considered as a layer switch if another key is pressed, and the above sequence would be registered as <code>KC_RGHT</code> (the mapping of <code>L</code> on layer 2).</p><p>For more granular control of this feature, you can add the following to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HOLD_ON_OTHER_KEY_PRESS_PER_KEY</span></span></code></pre></div><p>You can then add the following function to your keymap:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_hold_on_other_key_press</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, KC_BSPC):</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Immediately select the hold action when another key is pressed.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Do not select the hold action when another key is pressed.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="quick-tap-term" tabindex="-1">Quick Tap Term <a class="header-anchor" href="#quick-tap-term" aria-label="Permalink to &quot;Quick Tap Term&quot;">​</a></h2><p>When the user holds a key after tapping it, the tapping function is repeated by default, rather than activating the hold function. This allows keeping the ability to auto-repeat the tapping function of a dual-role key. <code>QUICK_TAP_TERM</code> enables fine tuning of that ability. If set to <code>0</code>, it will remove the auto-repeat ability and activate the hold function instead.</p><p><code>QUICK_TAP_TERM</code> is set to <code>TAPPING_TERM</code> by default, which is the maximum allowed value for <code>QUICK_TAP_TERM</code>. To override its value (in milliseconds) add the following to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QUICK_TAP_TERM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 120</span></span></code></pre></div><p>Example:</p><ul><li><code>SFT_T(KC_A)</code> Down</li><li><code>SFT_T(KC_A)</code> Up</li><li><code>SFT_T(KC_A)</code> Down</li><li>(wait until tapping term expires...)</li></ul><p>With default settings, <code>a</code> will be sent on the first release, then <code>a</code> will be sent on the second press allowing the computer to trigger its auto repeat function until the key is released.</p><p>With <code>QUICK_TAP_TERM</code> configured, the timing between <code>SFT_T(KC_A)</code> up and <code>SFT_T(KC_A)</code> down must be within <code>QUICK_TAP_TERM</code> to trigger auto repeat. Otherwise the second press will be sent as a Shift. If <code>QUICK_TAP_TERM</code> is set to <code>0</code>, the second press will always be sent as a Shift, effectively disabling auto-repeat.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>QUICK_TAP_TERM</code> timing will also impact anything that uses tapping toggles (Such as the <code>TT</code> layer keycode, and the One Shot Tap Toggle).</p></div><p>For more granular control of this feature, you can add the following to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QUICK_TAP_TERM_PER_KEY</span></span></code></pre></div><p>You can then add the following function to your keymap:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_quick_tap_term</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SFT_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_SPC):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QUICK_TAP_TERM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QUICK_TAP_TERM;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If <code>QUICK_TAP_TERM</code> is set higher than <code>TAPPING_TERM</code>, it will default to <code>TAPPING_TERM</code>.</p></div><h2 id="flow-tap" tabindex="-1">Flow Tap <a class="header-anchor" href="#flow-tap" aria-label="Permalink to &quot;Flow Tap&quot;">​</a></h2><p>Flow Tap modifies mod-tap <code>MT</code> and layer-tap <code>LT</code> keys such that when pressed within a short timeout of the preceding key, the tapping behavior is triggered. This is particularly useful for home row mods to avoid accidental mod triggers. It basically disables the hold behavior during fast typing, creating a &quot;flow of taps.&quot; This also helps to reduce the input lag of tap-hold keys during fast typing, since the tapped behavior is sent immediately.</p><p>Flow Tap is enabled by defining <code>FLOW_TAP_TERM</code> in your <code>config.h</code> with the desired timeout in milliseconds. A timeout of 150 ms is recommended as a starting point:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FLOW_TAP_TERM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150</span></span></code></pre></div><p>By default, Flow Tap is enabled when:</p><ul><li><p>The tap-hold key is pressed within <code>FLOW_TAP_TERM</code> milliseconds of the previous key press.</p></li><li><p>The tapping keycodes of the previous key and tap-hold key are <em>both</em> among <code>KC_A</code>–<code>KC_Z</code>, <code>KC_COMM</code>, <code>KC_DOT</code>, <code>KC_SCLN</code>, <code>KC_SLSH</code> (the main alphas area of a conventional QWERTY layout) or <code>KC_SPC</code>.</p></li></ul><p>As an exception to the above, Flow Tap is temporarily disabled while a tap-hold key is undecided. This is to allow chording multiple mod-tap keys without having to wait out the Flow Tap term.</p><h3 id="is-flow-tap-key" tabindex="-1">is_flow_tap_key() <a class="header-anchor" href="#is-flow-tap-key" aria-label="Permalink to &quot;is_flow_tap_key()&quot;">​</a></h3><p>Optionally, define the <code>is_flow_tap_key()</code> callback to specify where Flow Tap is enabled. The callback is called for both the tap-hold key <em>and</em> the key press immediately preceding it, and if the callback returns true for both keycodes, Flow Tap is enabled.</p><p>The default implementation of this callback is:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_flow_tap_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_mods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MOD_MASK_CG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MOD_BIT_LALT)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Disable Flow Tap on hotkeys.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_tap_keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keycode)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_SPC:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_A ... KC_Z:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_DOT:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_COMM:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_SCLN:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_SLSH:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Copy the above to your <code>keymap.c</code> and edit to customize. For instance, remove the <code>case KC_SPC</code> line to disable Flow Tap for the Space key.</p><h3 id="get-flow-tap-term" tabindex="-1">get_flow_tap_term() <a class="header-anchor" href="#get-flow-tap-term" aria-label="Permalink to &quot;get_flow_tap_term()&quot;">​</a></h3><p>Optionally, for further flexibility, define the <code>get_flow_tap_term()</code> callback. Flow Tap acts only when key events are closer together than the time returned by the callback. Return a time of 0 to disable filtering. In this way, Flow Tap may be disabled for certain tap-hold keys, or when following certain previous keys.</p><p>The default implementation of this callback is</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_flow_tap_term</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                           uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> prev_keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_flow_tap_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keycode) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_flow_tap_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prev_keycode)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLOW_TAP_TERM;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>In this callback, <code>keycode</code> and <code>record</code> correspond to the current tap-hold key, and <code>prev_keycode</code> is the keycode of the previous key. Return the timeout to use. Returning <code>0</code> disables Flow Tap. This callback enables setting per-key timeouts. It is also possible to enable or disable Flow Tap for certain tap-hold keys or when following certain previous keys. Example:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_flow_tap_term</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                           uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> prev_keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_flow_tap_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keycode) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_flow_tap_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prev_keycode)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LCTL_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_F):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RCTL_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_H):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLOW_TAP_TERM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Short timeout on these keys.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLOW_TAP_TERM;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Longer timeout otherwise.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Disable Flow Tap.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">If you define both <code>is_flow_tap_key()</code> and <code>get_flow_tap_term()</code>, then the latter takes precedence.</p></div><h2 id="chordal-hold" tabindex="-1">Chordal Hold <a class="header-anchor" href="#chordal-hold" aria-label="Permalink to &quot;Chordal Hold&quot;">​</a></h2><p>Chordal Hold is intended to be used together with either Permissive Hold or Hold On Other Key Press. Chordal Hold is enabled by adding to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CHORDAL_HOLD</span></span></code></pre></div><p>Chordal Hold implements, by default, an &quot;opposite hands&quot; rule. Suppose a tap-hold key is pressed and then, before the tapping term, another key is pressed. With Chordal Hold, the tap-hold key is settled as tapped if the two keys are on the same hand.</p><p>Otherwise, if the keys are on opposite hands, Chordal Hold introduces no new behavior. Hold On Other Key Press or Permissive Hold may be used together with Chordal Hold to configure the behavior in the opposite hands case. With Hold On Other Key Press, an opposite hands chord is settled immediately as held. Or with Permissive Hold, an opposite hands chord is settled as held provided the other key is pressed and released (nested press) before releasing the tap-hold key.</p><p>Chordal Hold may be useful to avoid accidental modifier activation with mod-taps, particularly in rolled keypresses when using home row mods.</p><p>Notes:</p><ul><li><p>Chordal Hold has no effect after the tapping term.</p></li><li><p>Combos are exempt from the opposite hands rule, since &quot;handedness&quot; is ill-defined in this case. Even so, Chordal Hold&#39;s behavior involving combos may be customized through the <code>get_chordal_hold()</code> callback.</p></li></ul><p>An example of a sequence that is affected by “chordal hold”:</p><ul><li><code>SFT_T(KC_A)</code> Down</li><li><code>KC_C</code> Down</li><li><code>KC_C</code> Up</li><li><code>SFT_T(KC_A)</code> Up</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>                         TAPPING_TERM   </span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span>\n<span class="line"><span>  | +----------------------+  |        |</span></span>\n<span class="line"><span>  | | SFT_T(KC_A)          |  |        |</span></span>\n<span class="line"><span>  | +----------------------+  |        |</span></span>\n<span class="line"><span>  |    +--------------+       |        |</span></span>\n<span class="line"><span>  |    | KC_C         |       |        |</span></span>\n<span class="line"><span>  |    +--------------+       |        |</span></span>\n<span class="line"><span>  +---------------------------|--------+</span></span></code></pre></div><p>If the two keys are on the same hand, then this will produce <code>ac</code> with <code>SFT_T(KC_A)</code> settled as tapped the moment that <code>KC_C</code> is pressed.</p><p>If the two keys are on opposite hands and the <code>HOLD_ON_OTHER_KEY_PRESS</code> option enabled, this will produce <code>C</code> with <code>SFT_T(KC_A)</code> settled as held when <code>KC_C</code> is pressed.</p><p>Or if the two keys are on opposite hands and the <code>PERMISSIVE_HOLD</code> option is enabled, this will produce <code>C</code> with <code>SFT_T(KC_A)</code> settled as held when that <code>KC_C</code> is released.</p><h3 id="chordal-hold-handedness" tabindex="-1">Chordal Hold Handedness <a class="header-anchor" href="#chordal-hold-handedness" aria-label="Permalink to &quot;Chordal Hold Handedness&quot;">​</a></h3><p>Determining whether keys are on the same or opposite hands involves defining the &quot;handedness&quot; of each key position. By default, if nothing is specified, handedness is guessed based on keyboard geometry.</p><p>Handedness may be specified with <code>chordal_hold_layout</code>. In keymap.c, define <code>chordal_hold_layout</code> in the following form:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> chordal_hold_layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MATRIX_ROWS][MATRIX_COLS] PROGMEM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LAYOUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                       &#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span></code></pre></div><p>Use the same <code>LAYOUT</code> macro as used to define your keymap layers. Each entry is a character indicating the handedness of one key, either <code>&#39;L&#39;</code> for left, <code>&#39;R&#39;</code> for right, or <code>&#39;*&#39;</code> to exempt keys from the &quot;opposite hands rule.&quot; A key with <code>&#39;*&#39;</code> handedness may settle as held in chords with any other key. This could be used perhaps on thumb keys or other places where you want to allow same-hand chords.</p><p>Keyboard makers may specify handedness in keyboard.json. Under <code>&quot;layouts&quot;</code>, specify the handedness of a key by adding a <code>&quot;hand&quot;</code> field with a value of either <code>&quot;L&quot;</code>, <code>&quot;R&quot;</code>, or <code>&quot;*&quot;</code>. Note that if <code>&quot;layouts&quot;</code> contains multiple layouts, only the first one is read. For example:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;matrix&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;hand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>Alternatively, handedness may be defined functionally with <code>chordal_hold_handedness()</code>. For example, in keymap.c define:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> chordal_hold_handedness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keypos_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key.col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MATRIX_COLS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Exempt the outer columns.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // On split keyboards, typically, the first half of the rows are on the</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // left, and the other half are on the right.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key.row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MATRIX_ROWS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;L&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Given the matrix position of a key, the function should return <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, or <code>&#39;*&#39;</code>. Adapt the logic in this function according to the keyboard&#39;s matrix.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note the matrix may have irregularities around larger keys, around the edges of the board, and around thumb clusters. You may find it helpful to use <a href="./faq_debug#which-matrix-position-is-this-keypress">this debugging example</a> to correspond physical keys to matrix positions.</p></div><div class="tip custom-block"><p class="custom-block-title">If you define both <code>chordal_hold_layout[MATRIX_ROWS][MATRIX_COLS]</code> and</p><p><code>chordal_hold_handedness(keypos_t key)</code> for handedness, the latter takes precedence.</p></div><h3 id="per-chord-customization" tabindex="-1">Per-chord customization <a class="header-anchor" href="#per-chord-customization" aria-label="Permalink to &quot;Per-chord customization&quot;">​</a></h3><p>Beyond the per-key configuration possible through handedness, Chordal Hold may be configured at a <em>per-chord</em> granularity for detailed tuning. In keymap.c, define <code>get_chordal_hold()</code>. Returning <code>true</code> allows the chord to be held, while returning <code>false</code> settles as tapped.</p><p>For example:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_chordal_hold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tap_hold_keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tap_hold_record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> other_keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> other_record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Exceptionally allow some one-handed chords for hotkeys.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tap_hold_keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LCTL_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_Z):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (other_keycode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other_keycode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_V) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RCTL_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_SLSH):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (other_keycode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_N) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Otherwise defer to the opposite hands rule.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_chordal_hold_default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tap_hold_record, other_record);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>As shown in the last line above, you may use <code>get_chordal_hold_default(tap_hold_record, other_record)</code> to get the default tap vs. hold decision according to the opposite hands rule.</p><h2 id="retro-tapping" tabindex="-1">Retro Tapping <a class="header-anchor" href="#retro-tapping" aria-label="Permalink to &quot;Retro Tapping&quot;">​</a></h2><p>To enable <code>retro tapping</code>, add the following to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RETRO_TAPPING</span></span></code></pre></div><p>Holding and releasing a dual-function key without pressing another key will result in nothing happening. With retro tapping enabled, releasing the key without pressing another will send the original keycode even if it is outside the tapping term.</p><p>For instance, holding and releasing <code>LT(2, KC_SPC)</code> without hitting another key will result in nothing happening. With this enabled, it will send <code>KC_SPC</code> instead.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>               TAPPING_TERM</span></span>\n<span class="line"><span>  +-----------------|------------------+</span></span>\n<span class="line"><span>  | +---------------|-------+          |</span></span>\n<span class="line"><span>  | | LT(2, KC_SPC) |       |          |</span></span>\n<span class="line"><span>  | +---------------|-------+          |</span></span>\n<span class="line"><span>  |                 |                  |</span></span>\n<span class="line"><span>  |                 |                  |</span></span>\n<span class="line"><span>  |                 |                  |</span></span>\n<span class="line"><span>  +-----------------|------------------+</span></span></code></pre></div><p>For more granular control of this feature, you can add the following to your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RETRO_TAPPING_PER_KEY</span></span></code></pre></div><p>You can then add the following function to your keymap:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_retro_tapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keycode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keyrecord_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (keycode) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, KC_SPC):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>If the programs you use bind an action to taps of modifier keys (e.g. tapping left GUI to bring up the applications menu or tapping left Alt to focus the menu bar), you may find that using retro-tapping falsely triggers those actions. To counteract this, you can define a <code>DUMMY_MOD_NEUTRALIZER_KEYCODE</code> in <code>config.h</code> that will get sent in between the register and unregister events of a held mod-tap key. That way, the programs on your computer will no longer interpret the mod suppression induced by retro-tapping as a lone tap of a modifier key and will thus not falsely trigger the undesired action.</p><p>Naturally, for this technique to be effective, you must choose a <code>DUMMY_MOD_NEUTRALIZER_KEYCODE</code> for which no keyboard shortcuts are bound to. Recommended values are: <code>KC_RIGHT_CTRL</code> or <code>KC_F18</code>. Please note that <code>DUMMY_MOD_NEUTRALIZER_KEYCODE</code> must be a basic, unmodified, HID keycode so values like <code>KC_NO</code>, <code>KC_TRANSPARENT</code> or <code>KC_PIPE</code> aka <code>S(KC_BACKSLASH)</code> are not permitted.</p><p>By default, only left Alt and left GUI are neutralized. If you want to change the list of applicable modifier masks, use the following in your <code>config.h</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MODS_TO_NEUTRALIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mod_mask_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mod_mask_2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ... }</span></span></code></pre></div><p>Examples:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DUMMY_MOD_NEUTRALIZER_KEYCODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KC_RIGHT_CTRL</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Neutralize left alt and left GUI (Default value)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MODS_TO_NEUTRALIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MOD_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_LEFT_ALT), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MOD_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_LEFT_GUI) }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Neutralize left alt, left GUI, right GUI and left Control+Shift</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MODS_TO_NEUTRALIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MOD_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_LEFT_ALT), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MOD_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_LEFT_GUI), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MOD_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_RIGHT_GUI), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MOD_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_LEFT_CTRL)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MOD_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KC_LEFT_SHIFT) }</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Do not use <code>MOD_xxx</code> constants like <code>MOD_LSFT</code> or <code>MOD_RALT</code>, since they&#39;re 5-bit packed bit-arrays while <code>MODS_TO_NEUTRALIZE</code> expects a list of 8-bit packed bit-arrays. Use <code>MOD_BIT(&lt;kc&gt;)</code> or <code>MOD_MASK_xxx</code> instead.</p></div><h3 id="retro-shift" tabindex="-1">Retro Shift <a class="header-anchor" href="#retro-shift" aria-label="Permalink to &quot;Retro Shift&quot;">​</a></h3><p><a href="./features/auto_shift">Auto Shift,</a> has its own version of <code>retro tapping</code> called <code>retro shift</code>. It is extremely similar to <code>retro tapping</code>, but holding the key past <code>AUTO_SHIFT_TIMEOUT</code> results in the value it sends being shifted. Other configurations also affect it differently; see <a href="./features/auto_shift#retro-shift">here</a> for more information.</p><h2 id="why-do-we-include-the-key-record-for-the-per-key-functions" tabindex="-1">Why do we include the key record for the per key functions? <a class="header-anchor" href="#why-do-we-include-the-key-record-for-the-per-key-functions" aria-label="Permalink to &quot;Why do we include the key record for the per key functions?&quot;">​</a></h2><p>One thing that you may notice is that we include the key record for all of the &quot;per key&quot; functions, and may be wondering why we do that.</p><p>Well, it&#39;s simple really: customization. But specifically, it depends on how your keyboard is wired up. For instance, if each row is actually using a row in the keyboard&#39;s matrix, then it may be simpler to use <code>if (record-&gt;event.key.row == 3)</code> instead of checking a whole bunch of keycodes. Which is especially good for those people using the Tap Hold type keys on the home row. So you could fine-tune those to not interfere with your normal typing.</p><h2 id="why-are-there-no-kb-or-user-functions" tabindex="-1">Why are there no <code>*_kb</code> or <code>*_user</code> functions?! <a class="header-anchor" href="#why-are-there-no-kb-or-user-functions" aria-label="Permalink to &quot;Why are there no `*_kb` or `*_user` functions?!&quot;">​</a></h2><p>Unlike many of the other functions here, there isn&#39;t a need (or even reason) to have a quantum or keyboard-level function. Only user-level functions are useful here, so no need to mark them as such.</p>', 175);
const _hoisted_176 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_176);
}
const tap_hold = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  tap_hold as default
};
