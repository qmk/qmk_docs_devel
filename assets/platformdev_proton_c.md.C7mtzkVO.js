import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.Cauyuiy8.js";
const __pageData = JSON.parse('{"title":"Proton C","description":"","frontmatter":{},"headers":[],"relativePath":"platformdev_proton_c.md","filePath":"platformdev_proton_c.md","lastUpdated":1751656200000}');
const _sfc_main = { name: "platformdev_proton_c.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="proton-c" tabindex="-1">Proton C <a class="header-anchor" href="#proton-c" aria-label="Permalink to &quot;Proton C&quot;">​</a></h1><p>The Proton C is an Arm STM32F303xC based drop-in replacement for the Pro Micro.</p><img src="https://i.imgur.com/GdsN1Rdh.jpg" alt="Proton C"><h4 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h4><ul><li>Through-hole mounted USB-C Port</li><li>32-bit 72MHz Cortex-M4 processor (STM32F303CCT6)</li><li>I2C, SPI, PWM, DMA, DAC, USART, I2S</li><li>23x 3.3V I/O Ports</li><li>1x 5V output for WS2812 LED chains</li><li>256kB flash</li><li>40kB RAM</li><li>AST1109MLTRQ speaker footprint</li><li>Reset button</li></ul><h2 id="warnings" tabindex="-1">Warnings <a class="header-anchor" href="#warnings" aria-label="Permalink to &quot;Warnings&quot;">​</a></h2><p>Some of the PCBs compatible with Pro Micro have VCC (3.3V) and RAW (5V) pins connected (shorted) on the pcb. Using the Proton C will short 5V power from USB and regulated 3.3V which is connected directly to the MCU. Shorting those pins may damage the MCU on the Proton C.</p><p>So far, it appears that this is only an issue on the Gherkin PCBs, but other PCBs may be affected in this way.</p><p>In this case, you may want to not hook up the RAW pin at all.</p><h2 id="manual-conversion" tabindex="-1">Manual Conversion <a class="header-anchor" href="#manual-conversion" aria-label="Permalink to &quot;Manual Conversion&quot;">​</a></h2><p>To use the Proton C natively, without having to specify <code>CONVERT_TO=proton_c</code>, you need to change the <code>MCU</code> line in <code>rules.mk</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>MCU = STM32F303</span></span>\n<span class="line"><span>BOARD = QMK_PROTON_C</span></span></code></pre></div><p>Remove these variables if they exist:</p><ul><li><code>BOOTLOADER</code></li><li><code>EXTRA_FLAGS</code></li></ul><p>Finally convert all pin assignments in <code>config.h</code> to the stm32 equivalents.</p><table><thead><tr><th>Pro Micro Left</th><th>Proton C Left</th><th></th><th>Proton C Right</th><th>Pro Micro Right</th></tr></thead><tbody><tr><td><code>D3</code></td><td><code>A9</code></td><td></td><td>5v</td><td>RAW (5v)</td></tr><tr><td><code>D2</code></td><td><code>A10</code></td><td></td><td>GND</td><td>GND</td></tr><tr><td>GND</td><td>GND</td><td></td><td>FLASH</td><td>RESET</td></tr><tr><td>GND</td><td>GND</td><td></td><td>3.3v</td><td>VCC <sup>1</sup></td></tr><tr><td><code>D1</code></td><td><code>B7</code></td><td></td><td><code>A2</code></td><td><code>F4</code></td></tr><tr><td><code>D0</code></td><td><code>B6</code></td><td></td><td><code>A1</code></td><td><code>F5</code></td></tr><tr><td><code>D4</code></td><td><code>B5</code></td><td></td><td><code>A0</code></td><td><code>F6</code></td></tr><tr><td><code>C6</code></td><td><code>B4</code></td><td></td><td><code>B8</code></td><td><code>F7</code></td></tr><tr><td><code>D7</code></td><td><code>B3</code></td><td></td><td><code>B13</code></td><td><code>B1</code></td></tr><tr><td><code>E6</code></td><td><code>B2</code></td><td></td><td><code>B14</code></td><td><code>B3</code></td></tr><tr><td><code>B4</code></td><td><code>B1</code></td><td></td><td><code>B15</code></td><td><code>B2</code></td></tr><tr><td><code>B5</code></td><td><code>B0</code></td><td></td><td><code>B9</code></td><td><code>B6</code></td></tr><tr><td><code>B0</code> (RX LED)</td><td><code>C13</code> <sup>2</sup></td><td></td><td><code>C13</code> <sup>2</sup></td><td><code>D5</code> (TX LED)</td></tr></tbody></table><p>You can also make use of several new pins on the extended portion of the Proton C:</p><table><thead><tr><th>Left</th><th></th><th>Right</th></tr></thead><tbody><tr><td><code>A4</code><sup>3</sup></td><td></td><td><code>B10</code></td></tr><tr><td><code>A5</code><sup>4</sup></td><td></td><td><code>B11</code></td></tr><tr><td><code>A6</code></td><td></td><td><code>B12</code></td></tr><tr><td><code>A7</code></td><td></td><td><code>A14</code><sup>5</sup> (SWCLK)</td></tr><tr><td><code>A8</code></td><td></td><td><code>A13</code><sup>5</sup> (SWDIO)</td></tr><tr><td><code>A15</code></td><td></td><td>RESET<sup>6</sup></td></tr></tbody></table><p>Notes:</p><ol><li>On a Pro Micro VCC can be 3.3v or 5v.</li><li>A Proton C only has one onboard LED, not two like a Pro Micro. The Pro Micro has an RX LED on <code>D5</code> and a TX LED on <code>B0</code>.</li><li><code>A4</code> is shared with the speaker.</li><li><code>A5</code> is shared with the speaker.</li><li><code>A13</code> and <code>A14</code> are used for hardware debugging (SWD). You can also use them for GPIO, but should use them last.</li><li>Short RESET to 3.3v (pull high) to reboot the MCU. This does not enter bootloader mode like a Pro Micro, it only resets the MCU.</li></ol>', 20);
const _hoisted_21 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_21);
}
const platformdev_proton_c = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  platformdev_proton_c as default
};
