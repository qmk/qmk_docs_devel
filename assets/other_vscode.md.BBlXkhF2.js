import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.Cauyuiy8.js";
const __pageData = JSON.parse('{"title":"Setting up Visual Studio Code for QMK Development","description":"","frontmatter":{},"headers":[],"relativePath":"other_vscode.md","filePath":"other_vscode.md","lastUpdated":1751656200000}');
const _sfc_main = { name: "other_vscode.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="setting-up-visual-studio-code-for-qmk-development" tabindex="-1">Setting up Visual Studio Code for QMK Development <a class="header-anchor" href="#setting-up-visual-studio-code-for-qmk-development" aria-label="Permalink to &quot;Setting up Visual Studio Code for QMK Development&quot;">​</a></h1><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> (VS Code) is an open-source code editor that supports many different programming languages.</p><p>Using a full-featured editor such as VS Code provides many advantages over a plain text editor, such as:</p><ul><li>intelligent code completion</li><li>convenient navigation in the code</li><li>refactoring tools</li><li>build automation (no need for the command-line)</li><li>a graphical front end for GIT</li><li>many other tools such as debugging, code formatting, showing call hierarchies etc.</li></ul><p>The purpose of this page is to document how to set up VS Code for developing QMK Firmware.</p><p>This guide covers how to configure everything needed on Windows and Ubuntu 18.04</p><h1 id="set-up-vs-code" tabindex="-1">Set up VS Code <a class="header-anchor" href="#set-up-vs-code" aria-label="Permalink to &quot;Set up VS Code&quot;">​</a></h1><p>Before starting, you will want to make sure that you have all of the build tools set up, and QMK Firmware cloned. Head to the <a href="./newbs_getting_started">Newbs Getting Started Guide</a> to get things set up, if you haven&#39;t already.</p><h2 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><ul><li><p><a href="https://git-scm.com/download/win" target="_blank" rel="noreferrer">Git for Windows</a> (This link will prompt to save/run the installer)</p><ol><li>Disable all of the options but <code>Git LFS (Large File Support)</code> and <code>Check daily for Git for Windows updates</code>.</li><li>Set the default editor to <code>Use Visual Studio Code as Git&#39;s default editor</code></li><li>Select the <code>Use Git from Git Bash only</code> option, since that&#39;s the option that you should use here.</li><li>For the <code>Choosing HTTPS transport backend</code>, either option should be fine.</li><li>Select the <code>Checkout as-is, commit Unix-style line endings</code> option. QMK Firmware uses Unix style commits.</li><li>For the extra options, leave the default options as is.</li></ol><p>This software is needed for Git support in VS Code. It may be possible to not include this, but it is much simpler to just use this.</p></li><li><p><a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases" target="_blank" rel="noreferrer">Git Credential Manager for Windows</a> (Optional)</p><p>This software provides better support for Git by providing secure storage for git credentials, MFA and personal access token generation.</p><p>This isn&#39;t strictly needed, but we would recommend it.</p></li></ul><h3 id="installing-vs-code" tabindex="-1">Installing VS Code <a class="header-anchor" href="#installing-vs-code" aria-label="Permalink to &quot;Installing VS Code&quot;">​</a></h3><ol><li>Head to <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VS Code</a> and download the installer</li><li>Run the installer</li></ol><p>This part is super simple. However, there is some configuration that we need to do to ensure things are configured correctly.</p><h4 id="msys2-setup" tabindex="-1">MSYS2 Setup <a class="header-anchor" href="#msys2-setup" aria-label="Permalink to &quot;MSYS2 Setup&quot;">​</a></h4><p>Now, we will set up the MSYS2 window to show up in VSCode as the integrated terminal. This has a number of advantages. Mostly, you can control+click on errors and jump to those files. This makes debugging much easier. It&#39;s also nice, in that you don&#39;t have to jump to another window.</p><ol><li><p>Click <kbd><kbd>File</kbd> &gt; <kbd>Preferences &gt;</kbd> &gt; <kbd>Settings</kbd></kbd></p></li><li><p>Click on the <kbd>{}</kbd> button, in the top right to open the <code>settings.json</code> file.</p></li><li><p>Set the file&#39;s content to:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;terminal.integrated.profiles.windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         &quot;QMK_MSYS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:/QMK_MSYS/usr/bin/bash.exe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             &quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                 &quot;MSYSTEM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MINGW64&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                 &quot;CHERE_INVOKING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     },</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;terminal.integrated.cursorStyle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;line&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>If there are settings here already, then just add everything between the first and last curly brackets and separate the existing settings with a comma from the newly added ones.</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you installed MSYS2 to a different folder, then you&#39;ll need to change the path for <code>terminal.integrated.shell.windows</code> to the correct path for your system.</p></div><ol start="4"><li><p>Hit Ctrl-<code>`</code> (Grave) to bring up the terminal or go to <kbd><kbd>View</kbd> &gt; <kbd>Terminal</kbd></kbd> (command <code>workbench.action.terminal.toggleTerminal</code>). A new terminal will be opened if there isn‘t one already.</p><p>This should start the terminal in the workspace&#39;s folder (so the <code>qmk_firmware</code> folder), and then you can compile your keyboard.</p></li></ol><h2 id="every-other-operating-system" tabindex="-1">Every other Operating System <a class="header-anchor" href="#every-other-operating-system" aria-label="Permalink to &quot;Every other Operating System&quot;">​</a></h2><ol><li>Head to <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VS Code</a> and download the installer</li><li>Run the installer</li><li>That&#39;s it</li></ol><p>No, really, that&#39;s it. The paths needed are already included when installing the packages, and it is much better about detecting the current workspace files and parsing them for IntelliSense.</p><h2 id="extensions" tabindex="-1">Extensions <a class="header-anchor" href="#extensions" aria-label="Permalink to &quot;Extensions&quot;">​</a></h2><p>There are a number of extensions that you may want to install:</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.git-extension-pack" target="_blank" rel="noreferrer">Git Extension Pack</a> - This installs a bunch of Git related tools that may make using Git with QMK Firmware easier.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd" target="_blank" rel="noreferrer">clangd</a> - <em>[Optional]</em> - This is the language server for C/C++ that VS Code uses. It provides IntelliSense and other features.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig" target="_blank" rel="noreferrer">EditorConfig for VS Code</a> - <em>[Optional]</em> - Helps to keep the code to the QMK Coding Conventions.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=bierner.github-markdown-preview" target="_blank" rel="noreferrer">GitHub Markdown Preview</a> - <em>[Optional]</em> - Makes the markdown preview in VS Code more like GitHub&#39;s.</li><li><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare" target="_blank" rel="noreferrer">VS Live Share Extension Pack</a> - <em>[Optional]</em> - This extension allows somebody else to access your workspace (or you to access somebody else&#39;s workspace) and help out. This is great if you&#39;re having issues and need some help from somebody.</li></ul><p>Restart once you&#39;ve installed any extensions.</p><h1 id="configure-vs-code-for-qmk" tabindex="-1">Configure VS Code for QMK <a class="header-anchor" href="#configure-vs-code-for-qmk" aria-label="Permalink to &quot;Configure VS Code for QMK&quot;">​</a></h1><ol><li>Click <kbd><kbd>File</kbd> &gt; <kbd>Open Folder</kbd></kbd></li><li>Open the QMK Firmware folder that you cloned from GitHub.</li><li>Click <kbd><kbd>File</kbd> &gt; <kbd>Save Workspace As...</kbd></kbd></li></ol><h2 id="configuring-vs-code" tabindex="-1">Configuring VS Code <a class="header-anchor" href="#configuring-vs-code" aria-label="Permalink to &quot;Configuring VS Code&quot;">​</a></h2><p>Using the <a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html" target="_blank" rel="noreferrer">standard <code>compile_commands.json</code> database</a>, we can get the VS code <em>clangd</em> extension to use the correct includes and defines used for your keyboard and keymap.</p><ol><li>Run <code>qmk compile -kb &lt;keyboard&gt; -km &lt;keymap&gt; --compiledb</code> to generate the <code>compile_commands.json</code>.</li><li>Inside VS code, press <kbd><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd></kbd> (macOS: <kbd><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd></kbd>) to open the command palette.</li><li>Start typing <code>clangd: Download Language Server</code> and select it when it appears. Note that this only needs to be done once on clangd extension installation, if it didn&#39;t already ask to do so.</li><li>Inside VS code, press <kbd><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd></kbd> (macOS: <kbd><kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd></kbd>) to open the command palette.</li><li>Start typing <code>clangd: Restart Language Server</code> and select it when it appears.</li></ol><p>Now you&#39;re ready to code QMK Firmware in VS Code!</p><h1 id="debugging-arm-mcus-with-visual-studio-code" tabindex="-1">Debugging ARM MCUs with Visual Studio Code <a class="header-anchor" href="#debugging-arm-mcus-with-visual-studio-code" aria-label="Permalink to &quot;Debugging ARM MCUs with Visual Studio Code&quot;">​</a></h1><p><strong>...and a Black Magic Probe.</strong></p><p>Visual Studio Code has the ability to debug applications, but requires some configuration in order to get it to be able to do so for ARM targets.</p><p>This documentation describes a known-working configuration for setting up the use of a Black Magic Probe to debug using VS Code.</p><p>It is assumed that you&#39;ve correctly set up the electrical connectivity of the Black Magic Probe with your MCU. Wiring up <code>NRST</code>, <code>SWDIO</code>, <code>SWCLK</code>, and <code>GND</code> should be enough.</p><p>Install the following plugin into VS Code:</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=marus25.cortex-debug" target="_blank" rel="noreferrer">Cortex-Debug</a> - This adds debugger support for ARM Cortex targets to VS Code.</li></ul><p>A debugging target for the MCU for your board needs to be defined, and can be done so by adding the following to a <code>.vscode/launch.json</code> file:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Use IntelliSense to learn about possible attributes.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Hover to view descriptions of existing attributes.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Black Magic Probe (OneKey Proton-C)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cortex-debug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;launch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;cwd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${workspaceRoot}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;executable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;${workspaceRoot}/.build/handwired_onekey_proton_c_default.elf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;servertype&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bmp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;BMPGDBSerialPort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COM4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;svdFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Q:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">svd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">STM32F303.svd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;device&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;STM32F303&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;armToolchainPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">QMK_MSYS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mingw64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You&#39;ll need to perform some modifications to the file above in order to target your specific device:</p><ul><li><code>&quot;name&quot;</code>: Can be anything, but if you&#39;re debugging multiple targets you&#39;ll want something descriptive here.</li><li><code>&quot;cwd&quot;</code>: The path to the QMK Firmware repository root directory -- <em>if using the <code>.vscode</code> directory existing in the <code>qmk_firmware</code> git repository, the default above should be correct</em></li><li><code>&quot;executable&quot;</code>: The path to the <code>elf</code> file generated as part of the build for your keyboard -- <em>exists in <code>&lt;qmk_firmware&gt;/.build</code></em></li><li><code>&quot;BMPGDBSerialPort&quot;</code>: The <code>COM</code> port under Windows, or the <code>/dev/...</code> path for Linux/macOS. Two serial port devices will be created -- the Black Magic Probe debug port is <em>usually</em> the first. If it doesn&#39;t work, try the second.</li><li><code>&quot;svdFile&quot;</code>: <em>[Optional]</em> The path to the SVD file that defines the register layout for the MCU -- the appropriate file can be downloaded from the <a href="https://github.com/posborne/cmsis-svd/tree/master/data/STMicro" target="_blank" rel="noreferrer">cmsis-svd repository</a></li><li><code>&quot;device&quot;</code>: The name of the MCU, which matches the <code>&lt;name&gt;</code> tag at the top of the downloaded <code>svd</code> file.</li><li><code>&quot;armToolchainPath&quot;</code>: <em>[Optional]</em> The path to the ARM toolchain installation location on Windows -- under normal circumstances Linux/macOS will auto-detect this correctly and will not need to be specified.</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Windows builds of QMK Firmware are generally compiled using QMK MSYS, and the path to gdb&#39;s location (<code>C:\\\\QMK_MSYS\\\\mingw64\\\\bin</code>) needs to be specified under <code>armToolchainPath</code> for it to be detected. You may also need to change the GDB path to point at <code>C:\\\\QMK_MSYS\\\\mingw64\\\\bin\\\\gdb-multiarch.exe</code> in the VSCode Cortex-Debug user settings: <img src="https://i.imgur.com/EGrPM1L.png" alt="VSCode Settings"></p></div><p>The following modifications must be made to the keyboard&#39;s <code>rules.mk</code> file to enable debug information and disable optimisations -- this will ensure breakpoints and variable viewing works correctly:</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Enable debug information in the final binaries</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DEBUG_ENABLE = yes</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Disable optimisations for debugging purposes</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LTO_ENABLE = no</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OPT = g</span></span></code></pre></div><p>At this point, you should build and flash your firmware through normal methods (<code>qmk compile ...</code> and <code>qmk flash ...</code>).</p><p>Once completed, you can:</p><ul><li>Switch to the debug view in VS Code (in the sidebar, the Play button with a bug next to it)</li><li>Select the newly-created debug target in the dropdown at the top of the sidebar</li><li>Click the green play button next to the dropdown</li></ul><p>VS Code&#39;s debugger will then start executing the compiled firmware on the MCU.</p><p>At this stage, you should have full debugging set up, with breakpoints and variable listings working!</p>', 51);
const _hoisted_52 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_52);
}
const other_vscode = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  other_vscode as default
};
