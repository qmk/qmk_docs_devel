import { _ as _export_sfc, c as createElementBlock, o as openBlock, a8 as createStaticVNode } from "./chunks/framework.Cauyuiy8.js";
const __pageData = JSON.parse('{"title":"Coding Conventions (Python)","description":"","frontmatter":{},"headers":[],"relativePath":"coding_conventions_python.md","filePath":"coding_conventions_python.md","lastUpdated":1751656200000}');
const _sfc_main = { name: "coding_conventions_python.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="coding-conventions-python" tabindex="-1">Coding Conventions (Python) <a class="header-anchor" href="#coding-conventions-python" aria-label="Permalink to &quot;Coding Conventions (Python)&quot;">​</a></h1><p>Most of our style follows PEP8 with some local modifications to make things less nit-picky.</p><ul><li>We target Python 3.9 for compatibility with all supported platforms.</li><li>We indent using four (4) spaces (soft tabs)</li><li>We encourage liberal use of comments <ul><li>Think of them as a story describing the feature</li><li>Use them liberally to explain why particular decisions were made.</li><li>Do not write obvious comments</li><li>If you&#39;re not sure if a comment is obvious, go ahead and include it.</li></ul></li><li>We require useful docstrings for all functions.</li><li>In general we don&#39;t wrap lines, they can be as long as needed. If you do choose to wrap lines please do not wrap any wider than 76 columns.</li><li>Some of our practices conflict with the wider python community to make our codebase more approachable to non-pythonistas.</li></ul><h1 id="yapf" tabindex="-1">YAPF <a class="header-anchor" href="#yapf" aria-label="Permalink to &quot;YAPF&quot;">​</a></h1><p>You can use <a href="https://github.com/google/yapf" target="_blank" rel="noreferrer">yapf</a> to style your code. We provide a config in <a href="https://github.com/qmk/qmk_firmware/blob/master/setup.cfg" target="_blank" rel="noreferrer">setup.cfg</a>.</p><h1 id="imports" tabindex="-1">Imports <a class="header-anchor" href="#imports" aria-label="Permalink to &quot;Imports&quot;">​</a></h1><p>We don&#39;t have a hard and fast rule for when to use <code>import ...</code> vs <code>from ... import ...</code>. Understandability and maintainability is our ultimate goal.</p><p>Generally we prefer to import specific function and class names from a module to keep code shorter and easier to understand. Sometimes this results in a name that is ambiguous, and in such cases we prefer to import the module instead. You should avoid using the &quot;as&quot; keyword when importing, unless you are importing a compatibility module.</p><p>Imports should be one line per module. We group import statements together using the standard python rules- system, 3rd party, local.</p><p>Do not use <code>from foo import *</code>. Supply a list of objects you want to import instead, or import the whole module.</p><h2 id="import-examples" tabindex="-1">Import Examples <a class="header-anchor" href="#import-examples" aria-label="Permalink to &quot;Import Examples&quot;">​</a></h2><p>Good:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from qmk import effects</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>effects.echo()</span></span></code></pre></div><p>Bad:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from qmk.effects import echo</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>echo()  # It&#39;s unclear where echo comes from</span></span></code></pre></div><p>Good:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>from qmk.keymap import compile_firmware</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>compile_firmware()</span></span></code></pre></div><p>OK, but the above is better:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import qmk.keymap</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>qmk.keymap.compile_firmware()</span></span></code></pre></div><h1 id="statements" tabindex="-1">Statements <a class="header-anchor" href="#statements" aria-label="Permalink to &quot;Statements&quot;">​</a></h1><p>One statement per line.</p><p>Even when allowed (EG <code>if foo: bar</code>) we do not combine 2 statements onto a single line.</p><h1 id="naming" tabindex="-1">Naming <a class="header-anchor" href="#naming" aria-label="Permalink to &quot;Naming&quot;">​</a></h1><p><code>module_name</code>, <code>package_name</code>, <code>ClassName</code>, <code>method_name</code>, <code>ExceptionName</code>, <code>function_name</code>, <code>GLOBAL_CONSTANT_NAME</code>, <code>global_var_name</code>, <code>instance_var_name</code>, <code>function_parameter_name</code>, <code>local_var_name</code>.</p><p>Function names, variable names, and filenames should be descriptive; eschew abbreviation. In particular, do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word.</p><p>Always use a .py filename extension. Never use dashes.</p><h2 id="names-to-avoid" tabindex="-1">Names to Avoid <a class="header-anchor" href="#names-to-avoid" aria-label="Permalink to &quot;Names to Avoid&quot;">​</a></h2><ul><li>single character names except for counters or iterators. You may use <code>e</code> as an exception identifier in try/except statements.</li><li>dashes (<code>-</code>) in any package/module name</li><li><code>__double_leading_and_trailing_underscore__</code> names (reserved by Python)</li></ul><h1 id="docstrings" tabindex="-1">Docstrings <a class="header-anchor" href="#docstrings" aria-label="Permalink to &quot;Docstrings&quot;">​</a></h1><p>To maintain consistency with our docstrings we&#39;ve set out the following guidelines.</p><ul><li>Use markdown formatting</li><li>Always use triple-dquote docstrings with at least one linebreak: <code>&quot;&quot;&quot;\\n&quot;&quot;&quot;</code></li><li>First line is a short (&lt; 70 char) description of what the function does</li><li>If you need more in your docstring leave a blank line between the description and the rest.</li><li>Start indented lines at the same indent level as the opening triple-dquote</li><li>Document all function arguments using the format described below</li><li>If present, Args:, Returns:, and Raises: should be the last three things in the docstring, separated by a blank line each.</li></ul><h2 id="simple-docstring-example" tabindex="-1">Simple docstring example <a class="header-anchor" href="#simple-docstring-example" aria-label="Permalink to &quot;Simple docstring example&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>def my_awesome_function():</span></span>\n<span class="line"><span>    &quot;&quot;&quot;Return the number of seconds since 1970 Jan 1 00:00 UTC.</span></span>\n<span class="line"><span>    &quot;&quot;&quot;</span></span>\n<span class="line"><span>    return int(time.time())</span></span></code></pre></div><h2 id="complex-docstring-example" tabindex="-1">Complex docstring example <a class="header-anchor" href="#complex-docstring-example" aria-label="Permalink to &quot;Complex docstring example&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>def my_awesome_function():</span></span>\n<span class="line"><span>    &quot;&quot;&quot;Return the number of seconds since 1970 Jan 1 00:00 UTC.</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    This function always returns an integer number of seconds.</span></span>\n<span class="line"><span>    &quot;&quot;&quot;</span></span>\n<span class="line"><span>    return int(time.time())</span></span></code></pre></div><h2 id="function-arguments-docstring-example" tabindex="-1">Function arguments docstring example <a class="header-anchor" href="#function-arguments-docstring-example" aria-label="Permalink to &quot;Function arguments docstring example&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>def my_awesome_function(start=None, offset=0):</span></span>\n<span class="line"><span>    &quot;&quot;&quot;Return the number of seconds since 1970 Jan 1 00:00 UTC.</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    This function always returns an integer number of seconds.</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    Args:</span></span>\n<span class="line"><span>        start</span></span>\n<span class="line"><span>            The time to start at instead of 1970 Jan 1 00:00 UTC</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        offset</span></span>\n<span class="line"><span>            Return an answer that has this number of seconds subtracted first</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    Returns:</span></span>\n<span class="line"><span>        An integer describing a number of seconds.</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    Raises:</span></span>\n<span class="line"><span>        ValueError</span></span>\n<span class="line"><span>            When `start` or `offset` are not positive numbers</span></span>\n<span class="line"><span>    &quot;&quot;&quot;</span></span>\n<span class="line"><span>    if start &lt; 0 or offset &lt; 0:</span></span>\n<span class="line"><span>        raise ValueError(&#39;start and offset must be positive numbers.&#39;)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    if not start:</span></span>\n<span class="line"><span>        start = time.time()</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    return int(start - offset)</span></span></code></pre></div><h1 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;Exceptions&quot;">​</a></h1><p>Exceptions are used to handle exceptional situations. They should not be used for flow control. This is a break from the python norm of &quot;ask for forgiveness.&quot; If you are catching an exception it should be to handle a situation that is unusual.</p><p>If you use a catch-all exception for any reason you must log the exception and stacktrace using cli.log.</p><p>Make your try/except blocks as short as possible. If you need a lot of try statements you may need to restructure your code.</p><h1 id="tuples" tabindex="-1">Tuples <a class="header-anchor" href="#tuples" aria-label="Permalink to &quot;Tuples&quot;">​</a></h1><p>When defining one-item tuples always include a trailing comma so that it is obvious you are using a tuple. Do not rely on implicit one-item tuple unpacking. Better still use a list which is unambiguous.</p><p>This is particularly important when using the printf-style format strings that are commonly used.</p><h1 id="lists-and-dictionaries" tabindex="-1">Lists and Dictionaries <a class="header-anchor" href="#lists-and-dictionaries" aria-label="Permalink to &quot;Lists and Dictionaries&quot;">​</a></h1><p>We have configured YAPF to differentiate between sequence styles with a trailing comma. When a trailing comma is omitted YAPF will format the sequence as a single line. When a trailing comma is included YAPF will format the sequence with one item per line.</p><p>You should generally prefer to keep short definition on a single line. Break out to multiple lines sooner rather than later to aid readability and maintainability.</p><h1 id="parentheses" tabindex="-1">Parentheses <a class="header-anchor" href="#parentheses" aria-label="Permalink to &quot;Parentheses&quot;">​</a></h1><p>Avoid excessive parentheses, but do use parentheses to make code easier to understand. Do not use them in return statements unless you are explicitly returning a tuple, or it is part of a math expression.</p><h1 id="format-strings" tabindex="-1">Format Strings <a class="header-anchor" href="#format-strings" aria-label="Permalink to &quot;Format Strings&quot;">​</a></h1><p>We generally prefer printf-style format strings. Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>name = &#39;World&#39;</span></span>\n<span class="line"><span>print(&#39;Hello, %s!&#39; % (name,))</span></span></code></pre></div><p>This style is used by the logging module, which we make use of extensively, and we have adopted it in other places for consistency. It is also more familiar to C programmers, who are a big part of our casual audience.</p><p>Our included CLI module has support for using these without using the percent (%) operator. Look at <code>cli.echo()</code> and the various <code>cli.log</code> functions (EG, <code>cli.log.info()</code>) for more details.</p><h1 id="comprehensions-generator-expressions" tabindex="-1">Comprehensions &amp; Generator Expressions <a class="header-anchor" href="#comprehensions-generator-expressions" aria-label="Permalink to &quot;Comprehensions &amp; Generator Expressions&quot;">​</a></h1><p>We encourage the liberal use of comprehensions and generators, but do not let them get too complex. If you need complexity fall back to a for loop that is easier to understand.</p><h1 id="lambdas" tabindex="-1">Lambdas <a class="header-anchor" href="#lambdas" aria-label="Permalink to &quot;Lambdas&quot;">​</a></h1><p>OK to use but probably should be avoided. With comprehensions and generators the need for lambdas is not as strong as it once was.</p><h1 id="conditional-expressions" tabindex="-1">Conditional Expressions <a class="header-anchor" href="#conditional-expressions" aria-label="Permalink to &quot;Conditional Expressions&quot;">​</a></h1><p>OK in variable assignment, but otherwise should be avoided.</p><p>Conditional expressions are if statements that are in line with code. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>x = 1 if cond else 2</span></span></code></pre></div><p>It&#39;s generally not a good idea to use these as function arguments, sequence items, etc. It&#39;s too easy to overlook.</p><h1 id="default-argument-values" tabindex="-1">Default Argument Values <a class="header-anchor" href="#default-argument-values" aria-label="Permalink to &quot;Default Argument Values&quot;">​</a></h1><p>Encouraged, but values must be immutable objects.</p><p>When specifying default values in argument lists always be careful to specify objects that can&#39;t be modified in place. If you use a mutable object the changes you make will persist between calls, which is usually not what you want. Even if that is what you intend to do it is confusing for others and will hinder understanding.</p><p>Bad:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>def my_func(foo={}):</span></span>\n<span class="line"><span>    pass</span></span></code></pre></div><p>Good:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>def my_func(foo=None):</span></span>\n<span class="line"><span>    if not foo:</span></span>\n<span class="line"><span>        foo = {}</span></span></code></pre></div><h1 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h1><p>Always use properties instead of getter and setter functions.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>class Foo(object):</span></span>\n<span class="line"><span>    def __init__(self):</span></span>\n<span class="line"><span>        self._bar = None</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    @property</span></span>\n<span class="line"><span>    def bar(self):</span></span>\n<span class="line"><span>        return self._bar</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    @bar.setter</span></span>\n<span class="line"><span>    def bar(self, bar):</span></span>\n<span class="line"><span>        self._bar = bar</span></span></code></pre></div><h1 id="true-false-evaluations" tabindex="-1">True/False Evaluations <a class="header-anchor" href="#true-false-evaluations" aria-label="Permalink to &quot;True/False Evaluations&quot;">​</a></h1><p>You should generally prefer the implicit True/False evaluation in if statements, rather than checking equivalency.</p><p>Bad:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if foo == True:</span></span>\n<span class="line"><span>    pass</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if bar == False:</span></span>\n<span class="line"><span>    pass</span></span></code></pre></div><p>Good:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if foo:</span></span>\n<span class="line"><span>    pass</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>if not bar:</span></span>\n<span class="line"><span>    pass</span></span></code></pre></div><h1 id="decorators" tabindex="-1">Decorators <a class="header-anchor" href="#decorators" aria-label="Permalink to &quot;Decorators&quot;">​</a></h1><p>Use when appropriate. Try to avoid too much magic unless it helps with understanding.</p><h1 id="threading-and-multiprocessing" tabindex="-1">Threading and Multiprocessing <a class="header-anchor" href="#threading-and-multiprocessing" aria-label="Permalink to &quot;Threading and Multiprocessing&quot;">​</a></h1><p>Should be avoided. If you need this you will have to make a strong case before we merge your code.</p><h1 id="power-features" tabindex="-1">Power Features <a class="header-anchor" href="#power-features" aria-label="Permalink to &quot;Power Features&quot;">​</a></h1><p>Python is an extremely flexible language and gives you many fancy features such as custom metaclasses, access to bytecode, on-the-fly compilation, dynamic inheritance, object reparenting, import hacks, reflection, modification of system internals, etc.</p><p>Don&#39;t use these.</p><p>Performance is not a critical concern for us, and code understandability is. We want our codebase to be approachable by someone who only has a day or two to play with it. These features generally come with a cost to easy understanding, and we would prefer to have code that can be readily understood over faster or more compact code.</p><p>Note that some standard library modules use these techniques and it is ok to make use of those modules. But please keep readability and understandability in mind when using them.</p><h1 id="type-annotated-code" tabindex="-1">Type Annotated Code <a class="header-anchor" href="#type-annotated-code" aria-label="Permalink to &quot;Type Annotated Code&quot;">​</a></h1><p>For now we are not using any type annotation system, and would prefer that code remain unannotated. We may revisit this in the future.</p><h1 id="function-length" tabindex="-1">Function length <a class="header-anchor" href="#function-length" aria-label="Permalink to &quot;Function length&quot;">​</a></h1><p>Prefer small and focused functions.</p><p>We recognize that long functions are sometimes appropriate, so no hard limit is placed on function length. If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program.</p><p>Even if your long function works perfectly now, someone modifying it in a few months may add new behavior. This could result in bugs that are hard to find. Keeping your functions short and simple makes it easier for other people to read and modify your code.</p><p>You could find long and complicated functions when working with some code. Do not be intimidated by modifying existing code: if working with such a function proves to be difficult, you find that errors are hard to debug, or you want to use a piece of it in several different contexts, consider breaking up the function into smaller and more manageable pieces.</p><h1 id="fixmes" tabindex="-1">FIXMEs <a class="header-anchor" href="#fixmes" aria-label="Permalink to &quot;FIXMEs&quot;">​</a></h1><p>It is OK to leave FIXMEs in code. Why? Encouraging people to at least document parts of code that need to be thought out more (or that are confusing) is better than leaving this code undocumented.</p><p>All FIXMEs should be formatted like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>FIXME(username): Revisit this code when the frob feature is done.</span></span></code></pre></div><p>...where username is your GitHub username.</p><h1 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h1><p>We use a combination of Integration and Unit testing to ensure that the our code is as bug-free as possible. All the tests can be found in <code>lib/python/qmk/tests/</code>. You can run all the tests with <code>qmk pytest</code>.</p><p>At the time of this writing our tests are not very comprehensive. Looking at the current tests and writing new test cases for untested situations is a great way to both familiarize yourself with the codebase and contribute to QMK.</p><h2 id="integration-tests" tabindex="-1">Integration Tests <a class="header-anchor" href="#integration-tests" aria-label="Permalink to &quot;Integration Tests&quot;">​</a></h2><p>Integration tests can be found in <code>lib/python/qmk/tests/test_cli_commands.py</code>. This is where CLI commands are actually run and their overall behavior is verified. We use <a href="https://docs.python.org/3.9/library/subprocess.html#module-subprocess" target="_blank" rel="noreferrer"><code>subprocess</code></a> to launch each CLI command and a combination of checking output and returncode to determine if the right thing happened.</p><h2 id="unit-tests" tabindex="-1">Unit Tests <a class="header-anchor" href="#unit-tests" aria-label="Permalink to &quot;Unit Tests&quot;">​</a></h2><p>The other <code>test_*.py</code> files in <code>lib/python/qmk/tests/</code> contain unit tests. You can write tests for individual functions inside <code>lib/python/qmk/</code> here. Generally these files are named after the module, with dots replaced by underscores.</p><p>At the time of this writing we do not do any mocking for our tests. If you would like to help us change this please <a href="https://github.com/qmk/qmk_firmware/issues/new?assignees=&amp;labels=cli%2C+python&amp;template=other_issues.md&amp;title=" target="_blank" rel="noreferrer">open an issue</a> or <a href="https://discord.gg/heQPAgy" target="_blank" rel="noreferrer">join #cli on Discord</a> and start a conversation there.</p>', 108);
const _hoisted_109 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_109);
}
const coding_conventions_python = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  coding_conventions_python as default
};
